<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.CodeAnalysis.Features</name>
    </assembly>
    <members>
        <member name="T:Roslyn.Utilities.DesktopShim">
            <summary>
            This is a bridge for APIs that are only available on Desktop 
            and NOT on CoreCLR. The compiler currently targets .NET 4.5 and CoreCLR
            so this shim is necessary for switching on the dependent behavior.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.#ctor">
            <summary>
            Values for these parameters can be provided (during testing) for mocking purposes.
            </summary> 
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.GetUnreferencedMetadataReferences(Microsoft.CodeAnalysis.Project,System.Collections.Generic.HashSet{Microsoft.CodeAnalysis.PortableExecutableReference})">
            <summary>
            Returns the set of PEReferences in the solution that are not currently being referenced
            by this project.  The set returned will be tuples containing the PEReference, and the project-id
            for the project we found the pe-reference in.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.IsInPackagesDirectory(Microsoft.CodeAnalysis.PortableExecutableReference)">
             <summary>
             We ignore references that are in a directory that contains the names "Packages".
             These directories are most likely the ones produced by NuGet, and we don't want
             to offer to add .dll reference manually for dlls that are part of NuGet packages.
             
             Note that this is only a heuristic (though a good one), and we should remove this
             when we can get an API from NuGet that tells us if a reference is actually provided
             by a nuget packages.
             
             This heuristic will do the right thing in practically all cases for all. It 
             prevents the very unpleasant experience of us offering to add a direct metadata 
             reference to something that should only be referenced as a nuget package.
            
             It does mean that if the following is true:
             You have a project that has a non-nuget metadata reference to something in a "packages"
             directory, and you are in another project that uses a type name that would have matched
             an accessible type from that dll. then we will not offer to add that .dll reference to
             that other project.
             
             However, that would be an exceedingly uncommon case that is degraded.  Whereas we're 
             vastly improved in the common case. This is a totally acceptable and desirable outcome
             for such a heuristic.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.CreateCompilation(Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.PortableExecutableReference)">
            <summary>
            Called when we want to search a metadata reference.  We create a dummy compilation
            containing just that reference and we search that.  That way we can get actual symbols
            returned.
            
            We don't want to use the project that the reference is actually associated with as 
            getting the compilation for that project may be extremely expensive.  For example,
            in a large solution it may cause us to build an enormous amount of skeleton assemblies.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.RemoteSymbolSearchService">
            <summary>
            Used to supply the OOP server a callback that it can use to search for ReferenceAssemblies or
            nuget packages.  We can't necessarily do that search directly in the OOP server as our 
            'SymbolSearchEngine' may actually be running in a *different* process (there is no guarantee
            that all remote work happens in the same process).  
            
            This does mean, currently, that when we call over to OOP to do a search, it will bounce
            back to VS, which will then bounce back out to OOP to perform the Nuget/ReferenceAssembly
            portion of the search.  Ideally we could keep this all OOP.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.AllSymbolsProjectSearchScope">
            <summary>
            SearchScope used for searching *all* the symbols contained within a project/compilation.
            i.e. the symbols created from source *and* symbols from references (both project and
            metadata).
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SourceSymbolsProjectSearchScope">
            <summary>
            SearchScope used for searching *only* the source symbols contained within a project/compilation.
            i.e. symbols from metadata will not be searched.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SymbolReferenceFinder.GetReferencesForMatchingTypesAsync(Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService{`0}.SearchScope)">
            <summary>
            Searches for types that match the name the user has written.  Returns <see cref="T:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SymbolReference"/>s
            to the <see cref="T:Microsoft.CodeAnalysis.INamespaceSymbol"/>s or <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>s those types are
            contained in.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SymbolReferenceFinder.GetReferencesForMatchingNamespacesAsync(Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService{`0}.SearchScope)">
            <summary>
            Searches for namespaces that match the name the user has written.  Returns <see cref="T:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SymbolReference"/>s
            to the <see cref="T:Microsoft.CodeAnalysis.INamespaceSymbol"/>s those namespaces are contained in.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SymbolReferenceFinder.GetReferencesForMatchingFieldsAndPropertiesAsync(Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService{`0}.SearchScope)">
            <summary>
            Specialized finder for the "Color Color" case.  Used when we have "Color.Black" and "Color"
            bound to a Field/Property, but not a type.  In this case, we want to look for namespaces
            containing 'Color' as if we import them it can resolve this issue.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SymbolReferenceFinder.GetReferencesForMatchingExtensionMethodsAsync(Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService{`0}.SearchScope)">
            <summary>
            Searches for extension methods that match the name the user has written.  Returns
            <see cref="T:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SymbolReference"/>s to the <see cref="T:Microsoft.CodeAnalysis.INamespaceSymbol"/>s that contain
            the static classes that those extension methods are contained in.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SymbolReferenceFinder.GetReferencesForCollectionInitializerMethodsAsync(Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService{`0}.SearchScope)">
            <summary>
            Searches for extension methods exactly called 'Add'.  Returns
            <see cref="T:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SymbolReference"/>s to the <see cref="T:Microsoft.CodeAnalysis.INamespaceSymbol"/>s that contain
            the static classes that those extension methods are contained in.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SymbolReferenceFinder.GetReferencesForQueryPatternsAsync(Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService{`0}.SearchScope)">
            <summary>
            Searches for extension methods exactly called 'Select'.  Returns
            <see cref="T:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SymbolReference"/>s to the <see cref="T:Microsoft.CodeAnalysis.INamespaceSymbol"/>s that contain
            the static classes that those extension methods are contained in.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SymbolReferenceFinder.GetReferencesForDeconstructAsync(Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService{`0}.SearchScope)">
            <summary>
            Searches for extension methods exactly called 'Deconstruct'.  Returns
            <see cref="T:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SymbolReference"/>s to the <see cref="T:Microsoft.CodeAnalysis.INamespaceSymbol"/>s that contain
            the static classes that those extension methods are contained in.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.MetadataSymbolReference.ShouldAddWithExistingImport(Microsoft.CodeAnalysis.Document)">
            <summary>
            If we're adding a metadata-reference, then we always offer to do the add,
            even if there's an existing source-import in the file.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.ProjectSymbolReference">
            <summary>
            Handles references to source symbols both from the current project the user is invoking
            'add-import' from, as well as symbols from other viable projects.
            
            In the case where the reference is from another project we put a glyph in the add using
            light bulb and we say "(from ProjectXXX)" to make it clear that this will do more than
            just add a using/import.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.ProjectSymbolReference.ShouldAddWithExistingImport(Microsoft.CodeAnalysis.Document)">
            <summary>
            If we're adding a reference to another project, it's ok to still add, even if there
            is an existing source-import in the file.  We won't add the import, but we'll still
            add the project-reference.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.SearchScope">
            <summary>
            SearchScope is used to control where the <see cref="T:Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1"/>
            searches.  We search different scopes in different ways.  For example we use 
            SymbolTreeInfos to search unreferenced projects and metadata dlls.  However,
            for the current project we're editing we defer to the compiler to do the 
            search.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.AddImport.AddImportFixData.TextChanges">
            <summary>
            Text changes to make to the document.  Usually just the import to add.  May also
            include a change to the name node the feature was invoked on to fix the casing of it.
            May be empty for fixes that don't need to add an import and only do something like
            add a project/metadata reference.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.AddImport.AddImportFixData.Title">
            <summary>
            String to display in the lightbulb menu.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.AddImport.AddImportFixData.Tags">
            <summary>
            Tags that control what glyph is displayed in the lightbulb menu.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.AddImport.AddImportFixData.Priority">
            <summary>
            The priority this item should have in the lightbulb list.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.AddImport.AddImportFixData.ProjectReferenceToAdd">
            <summary>
            The optional id for a <see cref="T:Microsoft.CodeAnalysis.Project"/> we'd like to add a reference to.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.AddImport.AddImportFixData.PortableExecutableReferenceProjectId">
            <summary>
            If we're adding <see cref="P:Microsoft.CodeAnalysis.AddImport.AddImportFixData.PortableExecutableReferenceFilePathToAdd"/> then this
            is the id for the <see cref="T:Microsoft.CodeAnalysis.Project"/> we can find that <see cref="T:Microsoft.CodeAnalysis.PortableExecutableReference"/>
            referenced from.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.AddImport.AddImportFixData.PortableExecutableReferenceFilePathToAdd">
            <summary>
            If we want to add a <see cref="T:Microsoft.CodeAnalysis.PortableExecutableReference"/> metadata reference, this 
            is the <see cref="P:Microsoft.CodeAnalysis.PortableExecutableReference.FilePath"/> for it.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.AddImportCodeAction">
            <summary>
            Code action we use when just adding a using, possibly with a project or
            metadata reference.  We don't use the standard code action types because
            we want to do things like show a glyph if this will do more than just add
            an import.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.AddImportCodeAction.OriginalDocument">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.Document"/> we started the add-import analysis in.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.AddImportCodeAction._textChanges">
            <summary>
            The changes to make to <see cref="F:Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.AddImportCodeAction.OriginalDocument"/> to add the import.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.ProjectSymbolReferenceCodeAction">
            <summary>
            Code action for adding an import when we find a symbol in source in either our
            starting project, or some other unreferenced project in the solution.  If we 
            find a source symbol in a different project, we'll also add a p2p reference when
            we apply the code action.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.InstallPackageAndAddImportCodeAction._installOperation">
            <summary>
            The operation that will actually install the nuget package.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.InstallPackageAndAddImportCodeAction.ComputePreviewOperationsAsync(System.Threading.CancellationToken)">
            <summary>
            For preview purposes we return all the operations in a list.  This way the 
            preview system stiches things together in the UI to make a suitable display.
            i.e. if we have a SolutionChangedOperation and some other operation with a 
            Title, then the UI will show that nicely to the user.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.InstallPackageAndAddImportCodeAction.ComputeOperationsAsync(System.Threading.CancellationToken)">
            <summary>
            However, for application purposes, we end up returning a single operation
            that will then apply all our sub actions in order, stopping the moment
            one of them fails.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.ParentInstallPackageCodeAction">
            <summary>
            This is the top level 'Install Nuget Package' code action we show in 
            the lightbulb.  It will have children to 'Install Latest', 
            'Install Version 'X' ..., and 'Install with package manager'.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.ParentInstallPackageCodeAction.#ctor(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.AddImport.AddImportFixData,Microsoft.CodeAnalysis.Packaging.IPackageInstallerService)">
            <summary>
            Even though we have child actions, we mark ourselves as explicitly non-inlinable.
            We want to the experience of having the top level item the user has to see and
            navigate through, and we don't want our child items confusingly being added to the
            top level light-bulb where it's not clear what effect they would have if invoked.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.SymbolReferenceCodeAction">
            <summary>
            Code action we use when just adding a using, possibly with a project or
            metadata reference.  We don't use the standard code action types because
            we want to do things like show a glyph if this will do more than just add
            an import.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.#ctor(Microsoft.CodeAnalysis.Packaging.IPackageInstallerService,Microsoft.CodeAnalysis.SymbolSearch.ISymbolSearchService)">
            <summary>
            Values for these parameters can be provided (during testing) for mocking purposes.
            </summary> 
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddPackage.AbstractAddPackageCodeFixProvider.#ctor(Microsoft.CodeAnalysis.Packaging.IPackageInstallerService,Microsoft.CodeAnalysis.SymbolSearch.ISymbolSearchService)">
            <summary>
            Values for these parameters can be provided (during testing) for mocking purposes.
            </summary> 
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddPackage.AbstractAddSpecificPackageCodeFixProvider.#ctor(Microsoft.CodeAnalysis.Packaging.IPackageInstallerService,Microsoft.CodeAnalysis.SymbolSearch.ISymbolSearchService)">
            <summary>
            Values for these parameters can be provided (during testing) for mocking purposes.
            </summary> 
        </member>
        <member name="T:Microsoft.CodeAnalysis.AddPackage.InstallPackageDirectlyCodeActionOperation">
            <summary>
            Operation responsible purely for installing a nuget package with a specific 
            version, or a the latest version of a nuget package.  Is not responsible
            for adding an import to user code.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.AddPackage.InstallPackageParentCodeAction">
            <summary>
            This is the top level 'Install Nuget Package' code action we show in 
            the lightbulb.  It will have children to 'Install Latest', 
            'Install Version 'X' ..., and 'Install with package manager'.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddPackage.InstallPackageParentCodeAction.#ctor(Microsoft.CodeAnalysis.Packaging.IPackageInstallerService,System.String,System.String,System.Boolean,Microsoft.CodeAnalysis.Document)">
            <summary>
            Even though we have child actions, we mark ourselves as explicitly non-inlinable.
            We want to the experience of having the top level item the user has to see and
            navigate through, and we don't want our child items confusingly being added to the
            top level light-bulb where it's not clear what effect they would have if invoked.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixContextExtensions.RegisterFixes(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CodeActions.CodeAction},Microsoft.CodeAnalysis.Diagnostic)">
            <summary>
            Use this helper to register multiple fixes (<paramref name="actions"/>) each of which addresses / fixes the same supplied <paramref name="diagnostic"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixContextExtensions.RegisterFixes(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CodeActions.CodeAction},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic})">
            <summary>
            Use this helper to register multiple fixes (<paramref name="actions"/>) each of which addresses / fixes the same set of supplied <paramref name="diagnostics"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFix"/>es supplied by a given fix provider
            (such as <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider"/> or <see cref="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.ISuppressionFixProvider"/>).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixCollection.FixAllState">
            <summary>
            Optional fix all context, which is non-null if the given <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixCollection.Provider"/> supports fix all occurrences code fix.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.IFixMultipleOccurrencesService.GetFix(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}},Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider,Microsoft.CodeAnalysis.CodeFixes.FixAllProvider,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the fix multiple occurrences code fix for the given diagnostics with source locations.
            NOTE: This method does not apply the fix to the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.IFixMultipleOccurrencesService.GetFix(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.Project,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}},Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider,Microsoft.CodeAnalysis.CodeFixes.FixAllProvider,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the fix multiple occurrences code fix for the given diagnostics with source locations.
            NOTE: This method does not apply the fix to the workspace.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.ICodeFixProviderFactory">
            <summary>
            CodeFixProvider factory. if an analyzer reference implements this, we call this to get CodeFixProviders
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.IFixAllGetFixesService.GetFixAllOperationsAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext,System.Boolean)">
            <summary>
            Computes the fix all occurrences code fix, brings up the preview changes dialog for the fix and
            returns the code action operations corresponding to the fix.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.IFixAllGetFixesService.GetFixAllChangedSolutionAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext)">
            <summary>
            Computes the fix all occurrences code fix and returns the changed solution.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.IPragmaBasedCodeAction">
            <summary>
            Suppression code action based on pragma add/remove/edit.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.PragmaBatchFixHelpers">
            <summary>
            Helper methods for pragma suppression add/remove batch fixers.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.PragmaHelpers">
            <summary>
            Helper methods for pragma based suppression code actions.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.RemoveSuppressionCodeAction">
            <summary>
            Base type for remove suppression code actions.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.RemoveSuppressionCodeAction.BatchFixer">
            <summary>
            Batch fixer for pragma suppression removal code action.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.RemoveSuppressionCodeAction.AttributeRemoveAction">
            <summary>
            Code action to remove suppress message attributes for remove suppression.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.RemoveSuppressionCodeAction.PragmaRemoveAction">
            <summary>
            Code action to edit/remove/add the pragma directives for removing diagnostic suppression.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.PragmaWarningBatchFixAllProvider">
            <summary>
            Batch fixer for pragma suppress code action.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.ExportSuppressionFixProviderAttribute">
            <summary>
            Use this attribute to declare a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.ISuppressionFixProvider"/> implementation so that it can be discovered by the host.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.Suppression.ExportSuppressionFixProviderAttribute.Name">
            <summary>
            The name of the <see cref="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.ISuppressionFixProvider"/>.  
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.Suppression.ExportSuppressionFixProviderAttribute.Languages">
            <summary>
            The source languages this provider can provide fixes for.  See <see cref="T:Microsoft.CodeAnalysis.LanguageNames"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeActions.DocumentNavigationOperation">
            <summary>
            A <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeActionOperation"/> for navigating to a specific position in a document.
            When <see cref="M:Microsoft.CodeAnalysis.CodeActions.CodeAction.GetOperationsAsync(System.Threading.CancellationToken)"/> is called an implementation
            of <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> can return an instance of this operation along with the other 
            operations they want to apply.  For example, an implementation could generate a new <see cref="T:Microsoft.CodeAnalysis.Document"/>
            in one <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeActionOperation"/> and then have the host editor navigate to that
            <see cref="T:Microsoft.CodeAnalysis.Document"/> using this operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.Providers.AbstractObjectCreationCompletionProvider.GetObjectCreationNewExpression(Microsoft.CodeAnalysis.SyntaxTree,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Return null if not in object creation type context.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItems(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol},Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.SyntaxContext,System.Boolean)">
            <summary>
            Given a list of symbols, creates the list of completion items for them.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItems(System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.SyntaxContext},System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.ISymbol,System.Collections.Generic.List{Microsoft.CodeAnalysis.ProjectId}},System.Collections.Generic.List{Microsoft.CodeAnalysis.ProjectId},System.Boolean)">
            <summary>
            Given a list of symbols, and a mapping from each symbol to its original SemanticModel, 
            creates the list of completion items for them.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItem(System.String,System.String,System.Collections.Generic.List{Microsoft.CodeAnalysis.ISymbol},Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.SyntaxContext,System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.ISymbol,System.Collections.Generic.List{Microsoft.CodeAnalysis.ProjectId}},System.Collections.Generic.List{Microsoft.CodeAnalysis.ProjectId},System.Boolean)">
            <summary>
            Given a Symbol, creates the completion item for it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.FindSymbolsMissingInLinkedContexts(System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.SyntaxContext},System.Collections.Immutable.ImmutableArray{System.ValueTuple{Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.SyntaxContext,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}}})">
            <summary>
            Given a list of symbols, determine which are not recommended at the same position in linked documents.
            </summary>
            <param name="symbolToContext">The symbols recommended in the active context.</param>
            <param name="linkedContextSymbolLists">The symbols recommended in linked documents</param>
            <returns>The list of projects each recommended symbol did NOT appear in.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.GetInsertionText(Microsoft.CodeAnalysis.Completion.CompletionItem,System.Char)">
            <summary>
            Override this if you want to provide customized insertion based on the character typed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CharacterSetModificationKind">
            <summary>
            The kind of character set modification.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CharacterSetModificationKind.Add">
            <summary>
            The rule adds new characters onto the existing set of characters.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CharacterSetModificationKind.Remove">
            <summary>
            The rule removes characters from the existing set of characters.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CharacterSetModificationKind.Replace">
            <summary>
            The rule replaces the existing set of characters.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CompletionChange">
            <summary>
            The change to be applied to the document when a <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/> is committed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionChange.TextChange">
            <summary>
            The text change to be applied to the document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionChange.NewPosition">
            <summary>
            The new caret position after the change has been applied.
            If null then the new caret position will be determined by the completion host.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionChange.IncludesCommitCharacter">
            <summary>
            True if the changes include the typed character that caused the <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/>
            to be committed.  If false the completion host will determine if and where the commit 
            character is inserted into the document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionChange.Create(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextChange},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionChange"/> instance.
            </summary>
            <param name="textChanges">The text changes to be applied to the document.</param>
            <param name="newPosition">The new caret position after the change has been applied. 
            If null then the caret position is not specified and will be determined by the completion host.</param>
            <param name="includesCommitCharacter">True if the changes include the typed character that caused the <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/> to be committed.
            If false, the completion host will determine if and where the commit character is inserted into the document.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionChange.WithTextChanges(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextChange})">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionChange"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionChange.TextChange"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionChange.WithNewPosition(System.Nullable{System.Int32})">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionChange"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionChange.NewPosition"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionChange.WithIncludesCommitCharacter(System.Boolean)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionChange"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionChange.IncludesCommitCharacter"/> property changed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule">
            <summary>
            A rule that modifies a set of characters.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule.Kind">
            <summary>
            The kind of modification.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule.Characters">
            <summary>
            One or more characters.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule.Create(Microsoft.CodeAnalysis.Completion.CharacterSetModificationKind,System.Collections.Immutable.ImmutableArray{System.Char})">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule"/> instance.
            </summary>
            <param name="kind">The kind of rule.</param>
            <param name="characters">One or more characters. These are typically punctuation characters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule.Create(Microsoft.CodeAnalysis.Completion.CharacterSetModificationKind,System.Char[])">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule"/> instance.
            </summary>
            <param name="kind">The kind of rule.</param>
            <param name="characters">One or more characters. These are typically punctuation characters.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CompletionDescription">
            <summary>
            The description of a <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionDescription.Empty">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionDescription"/> used when there is no description.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionDescription.TaggedParts">
            <summary>
            The individual tagged parts of the description.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionDescription.Create(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.TaggedText})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionDescription"/> with the specified <see cref="T:Microsoft.CodeAnalysis.TaggedText"/> parts.
            </summary>
            <param name="taggedParts">The individual tagged parts of the description.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionDescription.FromText(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionDescription"/> from untagged text.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionDescription.WithTaggedParts(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.TaggedText})">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionDescription"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionDescription.TaggedParts"/> property changed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionDescription.Text">
            <summary>
            The text of the description without tags.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionHelper.MatchesPattern(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns true if the completion item matches the pattern so far.  Returns 'true'
            iff the completion item matches and should be included in the filtered completion
            results, or false if it should not be.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionHelper.CompareItems(Microsoft.CodeAnalysis.Completion.CompletionItem,Microsoft.CodeAnalysis.Completion.CompletionItem,System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns true if item1 is a better completion item than item2 given the provided filter
            text, or false if it is not better.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CompletionItem">
            <summary>
            One of many possible completions used to form the completion list presented to the user.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.DisplayText">
            <summary>
            The text that is displayed to the user.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.FilterText">
            <summary>
            The text used to determine if the item matches the filter and is show in the list.
            This is often the same as <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItem.DisplayText"/> but may be different in certain circumstances.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.SortText">
            <summary>
            The text used to determine the order that the item appears in the list.
            This is often the same as the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItem.DisplayText"/> but may be different in certain circumstances.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.Span">
            <summary>
            The span of the syntax element associated with this item.
            
            The span identifies the text in the document that is used to filter the initial list presented to the user,
            and typically represents the region of the document that will be changed if this item is committed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.Properties">
            <summary>
            Additional information attached to a completion item by it creator.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.Tags">
            <summary>
            Descriptive tags from <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionTags"/>.
            These tags may influence how the item is displayed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.Rules">
            <summary>
            Rules that declare how this item should behave.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItem.Create(System.String,System.String,System.String,Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Immutable.ImmutableDictionary{System.String,System.String},System.Collections.Immutable.ImmutableArray{System.String},Microsoft.CodeAnalysis.Completion.CompletionItemRules)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/>
            </summary>
            <param name="displayText">The text that is displayed to the user.</param>
            <param name="filterText">The text used to determine if the item matches the filter and is show in the list.</param>
            <param name="sortText">The text used to determine the order that the item appears in the list.</param>
            <param name="span">The span of the syntax element in the document associated with this item.</param>
            <param name="properties">Additional information.</param>
            <param name="tags">Descriptive tags that may influence how the item is displayed.</param>
            <param name="rules">The rules that declare how this item should behave.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItem.WithSpan(Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItem.Span"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItem.WithDisplayText(System.String)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItem.DisplayText"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItem.WithFilterText(System.String)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItem.FilterText"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItem.WithSortText(System.String)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItem.SortText"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItem.WithProperties(System.Collections.Immutable.ImmutableDictionary{System.String,System.String})">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItem.Properties"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItem.AddProperty(System.String,System.String)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/> with a property added to the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItem.Properties"/> collection.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItem.WithTags(System.Collections.Immutable.ImmutableArray{System.String})">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItem.Tags"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItem.AddTag(System.String)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/> with a tag added to the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItem.Tags"/> collection.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItem.WithRules(Microsoft.CodeAnalysis.Completion.CompletionItemRules)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItem.Rules"/> property changed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionItemSelectionBehavior.SoftSelection">
            <summary>
            If no text has been typed, the item should be soft selected. This is appropriate for 
            completion providers that want to provide suggestions that shouldn't interfere with 
            typing.  For example a provider that comes up on space might offer items that are soft
            selected so that an additional space (or other puntuation character) will not then 
            commit that item.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionItemSelectionBehavior.HardSelection">
            <summary>
            If no text has been typed, the item should be hard selected.  This is appropriate for
            completion providers that are providing suggestions the user is nearly certain to 
            select.  Because the item is hard selected, any commit characters typed after it will
            cause it to be committed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CompletionItemRules">
            <summary>
            Rules for how the individual items are handled.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionItemRules.Default">
            <summary>
            The rule used when no rule is specified when constructing a <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItemRules.FilterCharacterRules">
            <summary>
            Rules that modify the set of characters that can be typed to filter the list of completion items.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItemRules.CommitCharacterRules">
            <summary>
            Rules that modify the set of characters that can be typed to cause the selected item to be commited.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItemRules.EnterKeyRule">
            <summary>
            A rule about whether the enter key is passed through to the editor after the selected item has been committed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItemRules.FormatOnCommit">
            <summary>
            True if the modified text should be formatted automatically.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItemRules.MatchPriority">
            <summary>
            True if the related completion item should be initially selected.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItemRules.SelectionBehavior">
            <summary>
            How this item should be selected when the completion list first appears and
            before the user has typed any characters.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItemRules.Create(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule},Microsoft.CodeAnalysis.Completion.EnterKeyRule,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItemRules"/> instance.
            </summary>
            <param name="filterCharacterRules">Rules about which keys typed are used to filter the list of completion items.</param>
            <param name="commitCharacterRules">Rules about which keys typed caused the completion item to be committed.</param>
            <param name="enterKeyRule">Rule about whether the enter key is passed through to the editor after the selected item has been committed.</param>
            <param name="formatOnCommit">True if the modified text should be formatted automatically.</param>
            <param name="matchPriority">True if the related completion item should be initially selected.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItemRules.Create(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule},Microsoft.CodeAnalysis.Completion.EnterKeyRule,System.Boolean,System.Nullable{System.Int32},Microsoft.CodeAnalysis.Completion.CompletionItemSelectionBehavior)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItemRules"/> instance.
            </summary>
            <param name="filterCharacterRules">Rules about which keys typed are used to filter the list of completion items.</param>
            <param name="commitCharacterRules">Rules about which keys typed caused the completion item to be committed.</param>
            <param name="enterKeyRule">Rule about whether the enter key is passed through to the editor after the selected item has been committed.</param>
            <param name="formatOnCommit">True if the modified text should be formatted automatically.</param>
            <param name="matchPriority">True if the related completion item should be initially selected.</param>
            <param name="selectionBehavior">How this item should be selected if no text has been typed after the completion list is brought up.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItemRules.Create(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule},Microsoft.CodeAnalysis.Completion.EnterKeyRule,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItemRules"/> instance--internal for TypeScript.
            </summary>
            <param name="filterCharacterRules">Rules about which keys typed are used to filter the list of completion items.</param>
            <param name="commitCharacterRules">Rules about which keys typed caused the completion item to be committed.</param>
            <param name="enterKeyRule">Rule about whether the enter key is passed through to the editor after the selected item has been committed.</param>
            <param name="formatOnCommit">True if the modified text should be formatted automatically.</param>
            <param name="preselect">True if the related completion item should be initially selected.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItemRules.WithFilterCharacterRules(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule})">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItemRules"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItemRules.FilterCharacterRules"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItemRules.WithCommitCharacterRules(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Completion.CharacterSetModificationRule})">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItemRules"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItemRules.CommitCharacterRules"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItemRules.WithEnterKeyRule(Microsoft.CodeAnalysis.Completion.EnterKeyRule)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItemRules"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItemRules.EnterKeyRule"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItemRules.WithFormatOnCommit(System.Boolean)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItemRules"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItemRules.FormatOnCommit"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItemRules.WithMatchPriority(System.Int32)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItemRules"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItemRules.MatchPriority"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItemRules.WithSelectionBehavior(Microsoft.CodeAnalysis.Completion.CompletionItemSelectionBehavior)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItemRules"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItemRules.SelectionBehavior"/> property changed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CompletionList">
            <summary>
            The set of completions to present to the user.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionList.Items">
            <summary>
            The completion items to present to the user.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionList.DefaultSpan">
            <summary>
            The span of the syntax element at the caret position when the <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionList"/> was created.
            Individual <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/> spans may vary.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionList.Span">
            <summary>
            The span of the syntax element at the caret position when the <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionList"/> 
            was created.
            
            The span identifies the text in the document that is used to filter the initial list 
            presented to the user, and typically represents the region of the document that will 
            be changed if this item is committed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionList.Rules">
            <summary>
            The rules used to control behavior of the completion list shown to the user during typing.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionList.SuggestionModeItem">
            <summary>
            An optional <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/> that appears selected in the list presented to the user during suggestion mode.
            Suggestion mode disables autoselection of items in the list, giving preference to the text typed by the user unless a specific item is selected manually.
            Specifying a <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionList.SuggestionModeItem"/> is a request that the completion host operate in suggestion mode.
            The item specified determines the text displayed and the description associated with it unless a different item is manually selected.
            No text is ever inserted when this item is completed, leaving the text the user typed instead.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionList.IsExclusive">
            <summary>
            For testing purposes only.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionList.Create(Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Completion.CompletionItem},Microsoft.CodeAnalysis.Completion.CompletionRules,Microsoft.CodeAnalysis.Completion.CompletionItem)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionList"/> instance.
            </summary>
            <param name="defaultSpan">The span of the syntax element at the caret position when the <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionList"/> was created.</param>
            <param name="items">The completion items to present to the user.</param>
            <param name="rules">The rules used to control behavior of the completion list shown to the user during typing.</param>
            <param name="suggestionModeItem">An optional <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/> that appears selected in the list presented to the user during suggestion mode.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionList.WithDefaultSpan(Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionList"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionList.DefaultSpan"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionList.WithItems(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Completion.CompletionItem})">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionList"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionList.Items"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionList.WithRules(Microsoft.CodeAnalysis.Completion.CompletionRules)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionList"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionList.Rules"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionList.WithSuggestionModeItem(Microsoft.CodeAnalysis.Completion.CompletionItem)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionList"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionList.SuggestionModeItem"/> property changed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionList.Empty">
            <summary>
            The default <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionList"/> returned when no items are found to populate the list.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CompletionContext">
            <summary>
            The context presented to a <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionProvider"/> when providing completions.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionContext.Document">
            <summary>
            The document that completion was invoked within.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionContext.Position">
            <summary>
            The caret position when completion was triggered.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionContext.DefaultItemSpan">
            <summary>
            The span of the syntax element at the caret position.
            
            This is the most common value used for <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItem.Span"/> and will
            be automatically assigned to any <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/> that has no <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItem.Span"/> specified.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionContext.CompletionListSpan">
            <summary>
            The span of the document the completion list corresponds to.  It will be set initially to
            the result of <see cref="M:Microsoft.CodeAnalysis.Completion.CompletionService.GetDefaultCompletionListSpan(Microsoft.CodeAnalysis.Text.SourceText,System.Int32)"/>, but it can
            be overwritten bduring <see cref="M:Microsoft.CodeAnalysis.Completion.CompletionService.GetCompletionsAsync(Microsoft.CodeAnalysis.Document,System.Int32,Microsoft.CodeAnalysis.Completion.CompletionTrigger,System.Collections.Immutable.ImmutableHashSet{System.String},Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)"/>.  The purpose
            of the span is to:
                1. Signify where the completions should be presented.
                2. Designate any existing text in the document that should be used for filtering.
                3. Specify, by default, what portion of the text should be replaced when a completion 
                   item is committed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionContext.Trigger">
            <summary>
            The triggering action that caused completion to be started.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionContext.Options">
            <summary>
            The options that completion was started with.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionContext.CancellationToken">
            <summary>
            The cancellation token to use for this operation.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionContext.IsExclusive">
            <summary>
            Set to true if the items added here should be the only items presented to the user.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionContext.#ctor(Microsoft.CodeAnalysis.Completion.CompletionProvider,Microsoft.CodeAnalysis.Document,System.Int32,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Completion.CompletionTrigger,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionContext"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionContext.SuggestionModeItem">
            <summary>
            An optional <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/> that appears selected in the list presented to the user during suggestion mode.
            
            Suggestion mode disables autoselection of items in the list, giving preference to the text typed by the user unless a specific item is selected manually.
            
            Specifying a <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionContext.SuggestionModeItem"/> is a request that the completion host operate in suggestion mode.
            The item specified determines the text displayed and the description associated with it unless a different item is manually selected.
            
            No text is ever inserted when this item is completed, leaving the text the user typed instead.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders">
            <summary>
            A subtype of <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionService"/> that aggregates completions from one or more <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionProvider"/>s.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.ExclusiveProviders">
            <summary>
            Internal for testing purposes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.GetBuiltInProviders">
            <summary>
            Returns the providers always available to the service.
            This does not included providers imported via MEF composition.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.ItemsMatch(Microsoft.CodeAnalysis.Completion.CompletionItem,Microsoft.CodeAnalysis.Completion.CompletionItem)">
            <summary>
            Determines if the items are similar enough they should be represented by a single item in the list.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.GetBetterItem(Microsoft.CodeAnalysis.Completion.CompletionItem,Microsoft.CodeAnalysis.Completion.CompletionItem)">
            <summary>
            Determines which of two items should represent the matching pair.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CompletionTags">
            <summary>
            The set of well known tags used for the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItem.Tags"/> property.
            These tags influence the presentation of items in the list.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CompletionTrigger">
            <summary>
            The action that triggered completion to start.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionTrigger.Kind">
            <summary>
            The reason that completion was started.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionTrigger.Character">
            <summary>
            The character associated with the triggering action.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionTrigger.Default">
            <summary>
            Do not use.  Use <see cref="F:Microsoft.CodeAnalysis.Completion.CompletionTrigger.Invoke"/> instead.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionTrigger.Invoke">
            <summary>
            The default <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionTrigger"/> when none is specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionTrigger.CreateInsertionTrigger(System.Char)">
            <summary>
            Creates a new instance of a <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionTrigger"/> association with the insertion of a typed character into the document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionTrigger.CreateDeletionTrigger(System.Char)">
            <summary>
            Creates a new instance of a <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionTrigger"/> association with the deletion of a character from the document.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CompletionTriggerKind">
            <summary>
            The kind of action that triggered completion to start.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionTriggerKind.Other">
            <summary>
            Completion was triggered via some other mechanism.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionTriggerKind.Invoke">
            <summary>
            Completion was trigger by a direct invocation of the completion feature 
            (ctrl-j in Visual Studio).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionTriggerKind.Insertion">
            <summary>
            Completion was triggered via an action inserting a character into the document.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionTriggerKind.Deletion">
            <summary>
            Completion was triggered via an action deleting a character from the document.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionTriggerKind.Snippets">
            <summary>
            Completion was triggered for snippets only.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionTriggerKind.InvokeAndCommitIfUnique">
            <summary>
            Completion was triggered with a request to commit if a unique item would be selected 
            (ctrl-space in Visual Studio).
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.EnterKeyRule">
            <summary>
            Determines whether the enter key is passed through to the editor after it has been used to commit a completion item.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.EnterKeyRule.Never">
            <summary>
            The enter key is never passed through to the editor after it has been used to commit the completion item.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.EnterKeyRule.Always">
            <summary>
            The enter key is always passed through to the editor after it has been used to commit the completion item.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.EnterKeyRule.AfterFullyTypedWord">
            <summary>
            The enter is key only passed through to the editor if the completion item has been fully typed out.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.ExportCompletionProviderAttribute">
            <summary>
            Use this attribute to export a <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionProvider"/> so that it will
            be found and used by the per language associated <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionService"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CompletionService">
            <summary>
            A per language service for constructing context dependent list of completions that 
            can be presented to a user during typing in an editor.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionService.GetService(Microsoft.CodeAnalysis.Document)">
            <summary>
            Gets the service corresponding to the specified document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionService.Language">
            <summary>
            The language from <see cref="T:Microsoft.CodeAnalysis.LanguageNames"/> this service corresponds to.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionService.GetRules">
            <summary>
            Gets the current presentation and behavior rules.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionService.ShouldTriggerCompletion(Microsoft.CodeAnalysis.Text.SourceText,System.Int32,Microsoft.CodeAnalysis.Completion.CompletionTrigger,System.Collections.Immutable.ImmutableHashSet{System.String},Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Returns true if the character recently inserted or deleted in the text should trigger completion.
            </summary>
            <param name="text">The document text to trigger completion within </param>
            <param name="caretPosition">The position of the caret after the triggering action.</param>
            <param name="trigger">The potential triggering action.</param>
            <param name="roles">Optional set of roles associated with the editor state.</param>
            <param name="options">Optional options that override the default options.</param>
            <remarks>
            This API uses SourceText instead of Document so implementations can only be based on text, not syntax or semantics.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionService.GetDefaultItemSpan(Microsoft.CodeAnalysis.Text.SourceText,System.Int32)">
            <summary>
            Gets the span of the syntax element at the caret position.
            This is the most common value used for <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionItem.Span"/>.
            </summary>
            <param name="text">The document text that completion is occurring within.</param>
            <param name="caretPosition">The position of the caret within the text.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionService.GetCompletionsAsync(Microsoft.CodeAnalysis.Document,System.Int32,Microsoft.CodeAnalysis.Completion.CompletionTrigger,System.Collections.Immutable.ImmutableHashSet{System.String},Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Gets the completions available at the caret position.
            </summary>
            <param name="document">The document that completion is occuring within.</param>
            <param name="caretPosition">The position of the caret after the triggering action.</param>
            <param name="trigger">The triggering action.</param>
            <param name="roles">Optional set of roles associated with the editor state.</param>
            <param name="options">Optional options that override the default options.</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionService.GetDescriptionAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Completion.CompletionItem,System.Threading.CancellationToken)">
            <summary>
            Gets the description of the item.
            </summary>
            <param name="document">The document that completion is occurring within.</param>
            <param name="item">The item to get the description for.</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionService.GetChangeAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Completion.CompletionItem,System.Nullable{System.Char},System.Threading.CancellationToken)">
            <summary>
            Gets the change to be applied when the item is committed.
            </summary>
            <param name="document">The document that completion is occurring within.</param>
            <param name="item">The item to get the change for.</param>
            <param name="commitCharacter">The typed character that caused the item to be committed. 
            This character may be used as part of the change. 
            This value is null when the commit was caused by the [TAB] or [ENTER] keys.</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionService.FilterItems(Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Completion.CompletionItem},System.String)">
            <summary>
            Given a list of completion items that match the current code typed by the user,
            returns the item that is considered the best match, and whether or not that
            item should be selected or not.
            
            itemToFilterText provides the values that each individual completion item should
            be filtered against.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.MatchPriority">
            <summary>
            An additional hint to the matching algorithm that can
            augment or override the existing text-based matching.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.MatchPriority.Default">
            <summary>
            The matching algorithm should give this item no special treatment.
            
            Ordinary <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionProvider"/>s typically specify this.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.MatchPriority.Preselect">
            <summary>
            The matching algorithm will tend to prefer this item unless
            a dramatically better text-based match is available.
            
            With no filter text, this item (or the first item alphabeitcally 
            with this priority) should always be selected.
            test
            This is used for specific IDE scenarios like "Object creation preselection"
            or "Enum preselection" or "Completion list tag preselection".
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CompletionProvider">
            <summary>
            Implement a subtype of this class and export it to provide completions during typing in an editor.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionProvider.ProvideCompletionsAsync(Microsoft.CodeAnalysis.Completion.CompletionContext)">
            <summary>
            Implement to contribute <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/>'s and other details to a <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionList"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionProvider.ShouldTriggerCompletion(Microsoft.CodeAnalysis.Text.SourceText,System.Int32,Microsoft.CodeAnalysis.Completion.CompletionTrigger,Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Returns true if the character recently inserted or deleted in the text should trigger completion.
            </summary>
            <param name="text">The text that completion is occuring within.</param>
            <param name="caretPosition">The position of the caret after the triggering action.</param>
            <param name="trigger">The triggering action.</param>
            <param name="options">The set of options in effect.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionProvider.GetDescriptionAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Completion.CompletionItem,System.Threading.CancellationToken)">
            <summary>
            Gets the description of the specified item.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionProvider.GetChangeAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Completion.CompletionItem,System.Nullable{System.Char},System.Threading.CancellationToken)">
            <summary>
            Gets the change to be applied when the specified item is committed.
            </summary>
            <param name="document">The current document.</param>
            <param name="item">The item to be committed.</param>
            <param name="commitKey">The optional key character that caused the commit.</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionProvider.IsSnippetProvider">
            <summary>
            True if the provider produces snippet items.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.SnippetsRule.Default">
            <summary>
            Snippet triggering follows the default rules of the language.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.SnippetsRule.NeverInclude">
            <summary>
            Snippets are never included in the completion list
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.SnippetsRule.AlwaysInclude">
            <summary>
            Snippets are always included in the completion list.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.SnippetsRule.IncludeAfterTypingIdentifierQuestionTab">
            <summary>
            Snippets are included if the user types: id?&lt;tab&gt;
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CompletionRules">
            <summary>
            Presentation and behavior rules for completion.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionRules.DismissIfEmpty">
            <summary>
            True if the completion list should be dismissed if the user's typing causes it to filter
            and display no items.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionRules.DismissIfLastCharacterDeleted">
            <summary>
            True if the list should be dismissed when the user deletes the last character in the span.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionRules.DefaultCommitCharacters">
            <summary>
            The default set of typed characters that cause the selected item to be committed.
            Individual <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/>s can override this.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionRules.DefaultEnterKeyRule">
            <summary>
            The default rule that determines if the enter key is passed through to the editor after the selected item has been committed.
            Individual <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItem"/>s can override this.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionRules.SnippetsRule">
            <summary>
            The rule determing how snippets work.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionRules.Create(System.Boolean,System.Boolean,System.Collections.Immutable.ImmutableArray{System.Char},Microsoft.CodeAnalysis.Completion.EnterKeyRule)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionRules"/> instance.
            </summary>
            <param name="dismissIfEmpty">True if the completion list should be dismissed if the user's typing causes it to filter and display no items.</param>
            <param name="dismissIfLastCharacterDeleted">True if the list should be dismissed when the user deletes the last character in the span.</param>
            <param name="defaultCommitCharacters">The default set of typed characters that cause the selected item to be committed.</param>
            <param name="defaultEnterKeyRule">The default rule that determines if the enter key is passed through to the editor after the selected item has been committed.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionRules.Create(System.Boolean,System.Boolean,System.Collections.Immutable.ImmutableArray{System.Char},Microsoft.CodeAnalysis.Completion.EnterKeyRule,Microsoft.CodeAnalysis.Completion.SnippetsRule)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionRules"/> instance.
            </summary>
            <param name="dismissIfEmpty">True if the completion list should be dismissed if the user's typing causes it to filter and display no items.</param>
            <param name="dismissIfLastCharacterDeleted">True if the list should be dismissed when the user deletes the last character in the span.</param>
            <param name="defaultCommitCharacters">The default set of typed characters that cause the selected item to be committed.</param>
            <param name="defaultEnterKeyRule">The default rule that determines if the enter key is passed through to the editor after the selected item has been committed.</param>
            <param name="snippetsRule">The rule that controls snippets behavior.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionRules.WithDismissIfEmpty(System.Boolean)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionRules"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionRules.DismissIfEmpty"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionRules.WithDismissIfLastCharacterDeleted(System.Boolean)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionRules"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionRules.DismissIfLastCharacterDeleted"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionRules.WithDefaultCommitCharacters(System.Collections.Immutable.ImmutableArray{System.Char})">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionRules"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionRules.DefaultCommitCharacters"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionRules.WithDefaultEnterKeyRule(Microsoft.CodeAnalysis.Completion.EnterKeyRule)">
            <summary>
            Creates a copy of this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionRules"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionRules.DefaultEnterKeyRule"/> property changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionRules.WithSnippetsRule(Microsoft.CodeAnalysis.Completion.SnippetsRule)">
            <summary>
            Creates a copy of the this <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionRules"/> with the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionRules.SnippetsRule"/> property changed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionRules.Default">
            <summary>
            The default <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionRules"/> if none is otherwise specified.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContextExtensions.RegisterRefactorings``1(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext,System.Collections.Immutable.ImmutableArray{``0})">
            <summary>
            Use this helper to register multiple refactorings (<paramref name="actions"/>).
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoring">
            <summary>
            Represents a set of transformations that can be applied to a piece of code.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoring.Actions">
            <summary>
            List of possible actions that can be used to transform the code.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.MoveType.AbstractMoveTypeService`5.MoveTypeEditor.GetOperationsAsync">
            <summary>
            Given a document and a type contained in it, moves the type
            out to its own document. The new document's name typically
            is the type name, or is at least based on the type name.
            </summary>
            <remarks>
            The algorithm for this, is as follows:
            1. Fork the original document that contains the type to be moved.
            2. Keep the type, required namespace containers and using statements.
               remove everything else from the forked document.
            3. Add this forked document to the solution.
            4. Finally, update the original document and remove the type from it.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.MoveType.AbstractMoveTypeService`5.MoveTypeEditor.AddNewDocumentWithSingleTypeDeclarationAndImportsAsync(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Forks the source document, keeps required type, namespace containers
            and adds it the solution.
            </summary>
            <param name="newDocumentId">id for the new document to be added</param>
            <returns>the new solution which contains a new document with the type being moved</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.MoveType.AbstractMoveTypeService`5.MoveTypeEditor.AddFinalNewLineIfDesired(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Add a trailing newline if we don't already have one if that's what the user's 
            preference is.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.MoveType.AbstractMoveTypeService`5.MoveTypeEditor.RemoveTypeFromSourceDocumentAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Document)">
            <summary>
            update the original document and remove the type that was moved.
            perform other fix ups as necessary.
            </summary>
            <returns>an updated solution with the original document fixed up as appropriate.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.MoveType.AbstractMoveTypeService`5.MoveTypeEditor.GetMembersToRemove(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Traverses the syntax tree of the forked document and
            collects a list of nodes that are not being moved.
            This list of nodes are then removed from the forked copy.
            </summary>
            <param name="root">root, of the syntax tree of forked document</param>
            <returns>list of syntax nodes, to be removed from the forked copy.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.MoveType.AbstractMoveTypeService`5.MoveTypeEditor.AddPartialModifiersToTypeChain(Microsoft.CodeAnalysis.Editing.DocumentEditor,System.Boolean,System.Boolean)">
            <summary>
            if a nested type is being moved, this ensures its containing type is partial.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.MoveType.AbstractMoveTypeService`5.RenameTypeEditor.RenameTypeToMatchFileAsync">
            <summary>
            Renames a type to match its containing file name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.MoveType.AbstractMoveTypeService`5.RenameFileEditor.RenameFileToMatchTypeName">
            <summary>
            Renames the file to match the type contained in it.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeRefactorings.MoveType.AbstractMoveTypeService`5.Editor">
            <summary>
            An abstract class for different edits performed by the Move Type Code Action.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.MoveType.AbstractMoveTypeService`5.Editor.GetOperationsAsync">
            <summary>
            operations performed by CodeAction.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.MoveType.AbstractMoveTypeService`5.MultipleTopLevelTypeDeclarationInSourceDocument(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            checks if there is a single top level type declaration in a document
            </summary>
            <remarks>
            optimized for perf, uses Skip(1).Any() instead of Count() > 1
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.MoveType.AbstractMoveTypeService`5.TypeMatchesDocumentName(`1,System.String,System.String,Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken)">
            <summary>
            checks if type name matches its parent document name, per style rules.
            </summary>
            <remarks>
            Note: For a nested type, a matching document name could be just the type name or a
            dotted qualified name of its type hierarchy.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.AbstractCodeStyleDiagnosticAnalyzer.HiddenDescriptor">
            <summary>
            Diagnostic descriptors corresponding to each of the DiagnosticSeverities.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.AbstractCodeStyleDiagnosticAnalyzer.UnnecessaryWithSuggestionDescriptor">
            <summary>
            Diagnostic descriptor for code you want to fade out *and* want to have a smart-tag
            appear for.  This is the common descriptor for code that is being faded out
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeStyle.AbstractCodeStyleDiagnosticAnalyzer.UnnecessaryWithoutSuggestionDescriptor">
            <summary>
            Diagnostic descriptor for code you want to fade out and do *not* want to have a smart-tag
            appear for.  This is uncommon but useful in some cases.  For example, if you are fading
            out pieces of code before/after another piece of code *on the same line*, then you will
            only want one usage of <see cref="F:Microsoft.CodeAnalysis.CodeStyle.AbstractCodeStyleDiagnosticAnalyzer.UnnecessaryWithSuggestionDescriptor"/> and multiple
            usages of <see cref="F:Microsoft.CodeAnalysis.CodeStyle.AbstractCodeStyleDiagnosticAnalyzer.UnnecessaryWithoutSuggestionDescriptor"/>.
            
            That's because if you use <see cref="F:Microsoft.CodeAnalysis.CodeStyle.AbstractCodeStyleDiagnosticAnalyzer.UnnecessaryWithSuggestionDescriptor"/> for all the
            faded out code then that will mean the user will see multiple code actions to fix the
            same issue when they bring up the code action on that line.  Using these two descriptors
            helps ensure that there will not be useless code-action overload.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ConvertToInterpolatedString.AbstractConvertConcatenationToInterpolatedStringRefactoringProvider">
            <summary>
            Code refactoring that converts expresions of the form:  a + b + " str " + d + e
            into:
                $"{a + b} str {d}{e}".
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.DesignerAttributes.DesignerAttributeDocumentData">
            <summary>
            Marshalling type to pass designer attribute data to/from the OOP process.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticArguments">
            <summary>
            helper type to package diagnostic arguments to pass around between remote hosts
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.CreateAnalyzerExceptionDiagnostic(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Exception)">
            <summary>
            Create a diagnostic for exception thrown by the given analyzer.
            </summary>
            <remarks>
            Keep this method in sync with "AnalyzerExecutor.CreateAnalyzerExceptionDiagnostic".
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.AbstractHostDiagnosticUpdateSource">
            <summary>
            Diagnostic update source for reporting workspace host specific diagnostics,
            which may not be related to any given project/document in the solution.
            For example, these include diagnostics generated for exceptions from third party analyzers.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.PreferFrameworkType.PreferFrameworkTypeDiagnosticAnalyzerBase`3.ShouldReportDiagnostic(`2,Microsoft.CodeAnalysis.Options.OptionSet,System.String,System.String@,Microsoft.CodeAnalysis.DiagnosticSeverity@)">
            <summary>
            Detects the context of this occurrence of predefined type and determines if we should report it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.PreferFrameworkType.PreferFrameworkTypeDiagnosticAnalyzerBase`3.OptionSettingPrefersFrameworkType(Microsoft.CodeAnalysis.CodeStyle.CodeStyleOption{System.Boolean},Microsoft.CodeAnalysis.DiagnosticSeverity)">
            <summary>
            checks if style is preferred and the enforcement is not None.
            </summary>
            <remarks>if predefined type is not preferred, it implies the preference is framework type.</remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.ICodeAnalysisDiagnosticAnalyzerExecutor">
            <summary>
            Interface to run DiagnosticAnalyzers. Implementation of this interface should be 
            able to run analyzers that can run in command line (Host agnostic DiagnosticAnalyzers)
            
            How and where analyzers run depends on the implementation of this interface
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer">
            <summary>
            Diagnostic Analyzer Engine V2
            
            This one follows pattern compiler has set for diagnostic analyzer.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.DocumentAnalysisData">
            <summary>
            Simple data holder for local diagnostics for an analyzer
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.DocumentAnalysisData.Version">
            <summary>
            Version of the Items
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.DocumentAnalysisData.Items">
            <summary>
            Current data that matches the version
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.DocumentAnalysisData.OldItems">
            <summary>
            When present, This hold onto last data we broadcast to outer world
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.ProjectAnalysisData">
            <summary>
            Data holder for all diagnostics for a project for an analyzer
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.ProjectAnalysisData.ProjectId">
            <summary>
            ProjectId of this data
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.ProjectAnalysisData.Version">
            <summary>
            Version of the Items
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.ProjectAnalysisData.Result">
            <summary>
            Current data that matches the version
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.ProjectAnalysisData.OldResult">
            <summary>
            When present, This hold onto last data we broadcast to outer world
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.AnalysisKind">
            <summary>
            enum for each analysis kind.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.CompilationManager">
            <summary>
            This cache CompilationWithAnalyzer for active/open files. 
            This will aggressively let go cached compilationWithAnalyzers to not hold them into memory too long.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.CompilationManager.GetAnalyzerDriverAsync(Microsoft.CodeAnalysis.Project,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet},System.Threading.CancellationToken)">
            <summary>
            Return CompilationWithAnalyzer for given project with given stateSets
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.Executor">
            <summary>
            This is responsible for getting diagnostics for given input.
            It either return one from cache or calculate new one.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.Executor.GetDocumentAnalysisDataAsync(Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers,Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet,Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.AnalysisKind,System.Threading.CancellationToken)">
            <summary>
            Return all local diagnostics (syntax, semantic) that belong to given document for the given StateSet (analyzer) either from cache or by calculating them
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.Executor.GetProjectAnalysisDataAsync(Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers,Microsoft.CodeAnalysis.Project,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Return all diagnostics that belong to given project for the given StateSets (analyzers) either from cache or by calculating them
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.Executor.ComputeDiagnosticsAsync(Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers,Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.AnalysisKind,System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)">
            <summary>
            Return all local diagnostics (syntax, semantic) that belong to given document for the given StateSet (analyzer) by calculating them
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.Executor.ComputeDiagnosticsAsync(Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers,Microsoft.CodeAnalysis.Project,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet},System.Threading.CancellationToken)">
            <summary>
            Return all diagnostics that belong to given project for the given StateSets (analyzers) by calculating them
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.ProjectAnalyzerReferenceChangedEventArgs">
            <summary>
            EventArgs for <see cref="E:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateManager.ProjectAnalyzerReferenceChanged"/>
            
            this event args contains information such as <see cref="F:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.ProjectAnalyzerReferenceChangedEventArgs.Project"/> the <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> has changed
            and what <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/> has changed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateManager">
            <summary>
            This is in charge of anything related to <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/>
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateManager.ProjectAnalyzerReferenceChanged">
            <summary>
            This will be raised whenever <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateManager"/> finds <see cref="P:Microsoft.CodeAnalysis.Project.AnalyzerReferences"/> change
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateManager.GetOrCreateAnalyzers(Microsoft.CodeAnalysis.Project)">
            <summary>
            Return existing or new <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s for the given <see cref="T:Microsoft.CodeAnalysis.Project"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateManager.GetStateSets">
            <summary>
            Return all <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/>.
            This will never create new <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/> but will return ones already created.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateManager.GetStateSets(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Return <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/>s for the given <see cref="T:Microsoft.CodeAnalysis.ProjectId"/>. 
            This will never create new <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/> but will return ones already created.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateManager.GetStateSets(Microsoft.CodeAnalysis.Project)">
            <summary>
            Return <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/>s for the given <see cref="T:Microsoft.CodeAnalysis.Project"/>.
            This will never create new <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/> but will return ones already created.
            Difference with <see cref="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateManager.GetStateSets(Microsoft.CodeAnalysis.ProjectId)"/> is that 
            this will only return <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/>s that have same language as <paramref name="project"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateManager.GetOrUpdateStateSets(Microsoft.CodeAnalysis.Project)">
            <summary>
            Return <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/>s for the given <see cref="T:Microsoft.CodeAnalysis.Project"/>. 
            This will either return already created <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/>s for the specific snapshot of <see cref="T:Microsoft.CodeAnalysis.Project"/> or
            It will create new <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/>s for the <see cref="T:Microsoft.CodeAnalysis.Project"/> and update internal state.
            
            since this has a side-effect, this should never be called concurrently. and incremental analyzer (solution crawler) should guarantee that.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateManager.GetOrCreateStateSets(Microsoft.CodeAnalysis.Project)">
            <summary>
            Return <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/>s for the given <see cref="T:Microsoft.CodeAnalysis.Project"/>. 
            This will either return already created <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/>s for the specific snapshot of <see cref="T:Microsoft.CodeAnalysis.Project"/> or
            It will create new <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/>s for the <see cref="T:Microsoft.CodeAnalysis.Project"/>.
            Unlike <see cref="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateManager.GetOrUpdateStateSets(Microsoft.CodeAnalysis.Project)"/>, this has no side effect.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateManager.GetOrCreateStateSet(Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Return <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/> for the given <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> in the context of <see cref="T:Microsoft.CodeAnalysis.Project"/>.
            This will either return already created <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/> for the specific snapshot of <see cref="T:Microsoft.CodeAnalysis.Project"/> or
            It will create new <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/> for the <see cref="T:Microsoft.CodeAnalysis.Project"/>.
            This will not have any side effect.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateManager.CreateBuildOnlyProjectStateSet(Microsoft.CodeAnalysis.Project)">
            <summary>
            Return <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/>s that are added as the given <see cref="T:Microsoft.CodeAnalysis.Project"/>'s AnalyzerReferences.
            This will never create new <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/> but will return ones already created.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateManager.HostStates">
            <summary>
            This class is responsible for anything related to <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/> for host level <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateManager.ProjectStates">
            <summary>
            This class is responsible for anything related to <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet"/> for project level <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet">
            <summary>
            this contains all states regarding a <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet.GetNameAndVersion(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Get the unique state name for the given analyzer.
            Note that this name is used by the underlying persistence stream of the corresponding <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.ProjectState"/> to Read/Write diagnostic data into the stream.
            If any two distinct analyzer have the same diagnostic state name, we will end up sharing the persistence stream between them, leading to duplicate/missing/incorrect diagnostic data.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.ActiveFileState">
            <summary>
            state that is responsible to hold onto local diagnostics data regarding active/opened files (depends on host)
            in memory.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.ProjectState">
            <summary>
            State for diagnostics that belong to a project at given time.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.ProjectState.GetAnalysisDataAsync(Microsoft.CodeAnalysis.Project,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Return all diagnostics for the given project stored in this state
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.ProjectState.GetAnalysisDataAsync(Microsoft.CodeAnalysis.Document,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Return all diagnostics for the given document stored in this state including non local diagnostics for this document
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.ProjectState.GetProjectAnalysisDataAsync(Microsoft.CodeAnalysis.Project,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Return all no location diagnostics for the given project stored in this state
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.LatestDiagnosticsForSpanGetter">
            <summary>
            Get diagnostics for given span either by using cache or calculating it on the spot.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerUpdateArgsId">
            <summary>
            Base type of a type that is used as <see cref="P:Microsoft.CodeAnalysis.Common.UpdatedEventArgs.Id"/> for live diagnostic
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticEventTaskScheduler">
            <summary>
            This task scheduler will block queuing new tasks if upper bound has met.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.None">
            <summary>
            Invalid value, analyzer must support at least one or more of the subsequent analysis categories.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.SyntaxAnalysis">
            <summary>
            Analyzer reports syntax diagnostics (i.e. registers a SyntaxTree action).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.SemanticSpanAnalysis">
            <summary>
            Analyzer reports semantic diagnostics and also supports incremental span based method body analysis.
            An analyzer can support incremental method body analysis if edits within a method body only affect the diagnostics reported by the analyzer on the edited method body.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.SemanticDocumentAnalysis">
            <summary>
            Analyzer reports semantic diagnostics but doesn't support incremental span based method body analysis.
            It needs to re-analyze the whole document for reporting semantic diagnostics even for method body editing scenarios.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.ProjectAnalysis">
            <summary>
            Analyzer reports project diagnostics (i.e. registers a Compilation action and/or Compilation end action diagnostics).
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.HostDiagnosticAnalyzerPackage">
            <summary>
            Information on vsix that contains diagnostic analyzers
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticUpdateSourceRegistrationService">
            <summary>
            A service that let people to register new IDiagnosticUpdateSource
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticUpdateSourceRegistrationService.Register(Microsoft.CodeAnalysis.Diagnostics.IDiagnosticUpdateSource)">
            <summary>
            Register new IDiagnosticUpdateSource
            
            Currently, it doesn't support unregister since our event is asynchronous and unregistering source that deal with asynchronous event is not straight forward.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.SynchronizeWithBuildAsync(Microsoft.CodeAnalysis.Workspace,System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticData}})">
            <summary>
            Synchronize build errors with live error.
            
            no cancellationToken since this can't be cancelled
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.BuildToolId">
            <summary>
            Support ErrorSource information.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager">
            <summary>
            This owns every information about analyzer itself 
            such as <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/>, <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> and <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/>.
            
            people should use this to get <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s or <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/>s of a <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/>.
            this will do appropriate de-duplication and cache for those information.
            
            this should be always thread-safe.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._hostDiagnosticAnalyzerPackages">
            <summary>
            This contains vsix info on where <see cref="T:Microsoft.CodeAnalysis.Diagnostics.HostDiagnosticAnalyzerPackage"/> comes from.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._hostAnalyzerReferencesMap">
            <summary>
            Key is analyzer reference identity <see cref="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.GetAnalyzerReferenceIdentity(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)"/>.
            
            We use the key to de-duplicate analyzer references if they are referenced from multiple places.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._hostDiagnosticAnalyzersPerLanguageMap">
            <summary>
            Key is the language the <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> supports and key for the second map is analyzer reference identity and
            <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> for that assembly reference.
            
            Entry will be lazily filled in.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._lazyHostDiagnosticAnalyzersPerReferenceMap">
            <summary>
            Key is analyzer reference identity <see cref="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.GetAnalyzerReferenceIdentity(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)"/>.
            
            Value is set of <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> that belong to the <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/>.
            
            We populate it lazily. otherwise, we will bring in all analyzers preemptively
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._hostDiagnosticUpdateSource">
            <summary>
            Host diagnostic update source for analyzer host specific diagnostics.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._compilerDiagnosticAnalyzerMap">
            <summary>
            map to compiler diagnostic analyzer.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._hostDiagnosticAnalyzerPackageNameMap">
            <summary>
            map from host diagnostic analyzer to package name it came from
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._compilerDiagnosticAnalyzerDescriptorMap">
            <summary>
            map to compiler diagnostic analyzer descriptor.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._descriptorCache">
            <summary>
            Cache from <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> instance to its supported descriptors.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.GetAnalyzerReferenceIdentity(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            It returns a string that can be used as a way to de-duplicate <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.CreateAnalyzerReferencesMap(Microsoft.CodeAnalysis.Project)">
            <summary>
            It returns a map with <see cref="P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.Id"/> as key and <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> as value
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.GetDiagnosticDescriptors(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Return <see cref="P:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.SupportedDiagnostics"/> of given <paramref name="analyzer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.IsAnalyzerSuppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Project)">
            <summary>
            Return true if the given <paramref name="analyzer"/> is suppressed for the given project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.GetHostDiagnosticAnalyzersPerReference(System.String)">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> identity and <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s map for given <paramref name="language"/>
            </summary> 
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.GetHostDiagnosticDescriptorsPerReference">
            <summary>
            Create <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> identity and <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/>s map
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.CreateDiagnosticDescriptorsPerReference(Microsoft.CodeAnalysis.Project)">
            <summary>
            Create <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> identity and <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/>s map for given <paramref name="project"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.CreateDiagnosticAnalyzersPerReference(Microsoft.CodeAnalysis.Project)">
            <summary>
            Create <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> identity and <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s map for given <paramref name="project"/> that
            includes both host and project analyzers
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.CreateProjectDiagnosticAnalyzersPerReference(Microsoft.CodeAnalysis.Project)">
            <summary>
            Create <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> identity and <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s map for given <paramref name="project"/> that
            has only project analyzers
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.CreateDiagnosticAnalyzers(Microsoft.CodeAnalysis.Project)">
            <summary>
            Create <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s collection for given <paramref name="project"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.IsCompilerDiagnostic(System.String,Microsoft.CodeAnalysis.Diagnostics.DiagnosticData)">
            <summary>
            Check whether given <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticData"/> belong to compiler diagnostic analyzer
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.GetCompilerDiagnosticAnalyzer(System.String)">
            <summary>
            Return compiler <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> for the given language.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.IsCompilerDiagnosticAnalyzer(System.String,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Check whether given <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> is compiler analyzer for the language or not.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.GetDiagnosticAnalyzerPackageName(System.String,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Get Name of Package (vsix) which Host <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> is from.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticCustomTags.s_microsoftCustomTags">
            <summary>
            it is string[] because DiagnosticDescriptor expects string[]. 
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedKind.DiagnosticsRemoved">
            <summary>
            Called when the diagnostic analyzer engine decides to remove existing diagnostics.
            For example, this can happen when a document is removed from a solution.  In that
            case the analyzer engine will delete all diagnostics associated with that document.
            Any layers caching diagnostics should listen for these events to know when to 
            delete their cached items entirely.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedKind.DiagnosticsCreated">
            <summary>
            Called when a new set of (possibly empty) diagnostics have been produced.  This
            happens through normal editing and processing of files as diagnostic analyzers
            produce new diagnostics for documents and projects.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IAnalyzerDriverService.ComputeDeclarationsInSpan(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.Text.TextSpan,System.Boolean,System.Collections.Generic.List{Microsoft.CodeAnalysis.DeclarationInfo},System.Threading.CancellationToken)">
            <summary>
            Computes the <see cref="T:Microsoft.CodeAnalysis.DeclarationInfo"/> for all the declarations whose span overlaps with the given <paramref name="span"/>.
            </summary>
            <param name="model">The semantic model for the document.</param>
            <param name="span">Span to get declarations.</param>
            <param name="getSymbol">Flag indicating whether <see cref="P:Microsoft.CodeAnalysis.DeclarationInfo.DeclaredSymbol"/> should be computed for the returned declaration infos.
            If false, then <see cref="P:Microsoft.CodeAnalysis.DeclarationInfo.DeclaredSymbol"/> is always null.</param>
            <param name="builder">Builder to add computed declarations.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.IBuiltInAnalyzer">
            <summary>
            This interface is a marker for all the analyzers that are built in.
            We will record non-fatal-watson if any analyzer with this interface throws an exception.
            
            also, built in analyzer can do things that third-party analyzer (command line analyzer) can't do
            such as reporting all diagnostic descriptors as hidden when it can return different severity on runtime.
            
            or reporting diagnostics ID that is not reported by SupportedDiagnostics.
            
            this interface is used by the engine to allow this special behavior over command line analyzers.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IBuiltInAnalyzer.GetAnalyzerCategory">
            <summary>
            This category will be used to run analyzer more efficiently by restricting scope of analysis
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IBuiltInAnalyzer.OpenFileOnly(Microsoft.CodeAnalysis.Workspace)">
            <summary>
            This indicates whether this builtin analyzer will only run on opened files.
            
            all analyzers that want to run on closed files must be able to run in remote host.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.Reanalyze(Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectId},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},System.Boolean)">
            <summary>
            re-analyze given projects and documents
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetSpecificCachedDiagnosticsAsync(Microsoft.CodeAnalysis.Workspace,System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            get specific diagnostics currently stored in the source. returned diagnostic might be out-of-date if solution has changed but analyzer hasn't run for the new solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetCachedDiagnosticsAsync(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            get diagnostics currently stored in the source. returned diagnostic might be out-of-date if solution has changed but analyzer hasn't run for the new solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetSpecificDiagnosticsAsync(Microsoft.CodeAnalysis.Solution,System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            get specific diagnostics for the given solution. all diagnostics returned should be up-to-date with respect to the given solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetDiagnosticsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            get diagnostics for the given solution. all diagnostics returned should be up-to-date with respect to the given solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.ContainsDiagnostics(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            true if given project has any diagnostics
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetDiagnosticsForIdsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Collections.Immutable.ImmutableHashSet{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            get diagnostics of the given diagnostic ids from the given solution. all diagnostics returned should be up-to-date with respect to the given solution.
            Note that for project case, this method returns diagnostics from all project documents as well. Use <see cref="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetProjectDiagnosticsForIdsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{System.String},System.Boolean,System.Threading.CancellationToken)"/>
            if you want to fetch only project diagnostics without source locations.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetProjectDiagnosticsForIdsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            get project diagnostics (diagnostics with no source location) of the given diagnostic ids from the given solution. all diagnostics returned should be up-to-date with respect to the given solution.
            Note that this method doesn't return any document diagnostics. Use <see cref="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetDiagnosticsForIdsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Collections.Immutable.ImmutableHashSet{System.String},System.Boolean,System.Threading.CancellationToken)"/> to also fetch those.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.TryAppendDiagnosticsForSpanAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Generic.List{Microsoft.CodeAnalysis.Diagnostics.DiagnosticData},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            try to return up to date diagnostics for the given span for the document.
            
            it will return true if it was able to return all up-to-date diagnostics.
             otherwise, false indicating there are some missing diagnostics in the diagnostic list
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetDiagnosticsForSpanAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            return up to date diagnostics for the given span for the document
            
            this can be expensive since it is force analyzing diagnostics if it doesn't have up-to-date one yet.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetDiagnosticDescriptors(Microsoft.CodeAnalysis.Project)">
            <summary>
            Gets a list of the diagnostics that are provided by this service.
            If the given <paramref name="projectOpt"/> is non-null, then gets the diagnostics for the project.
            Otherwise, returns the global set of diagnostics enabled for the workspace.
            </summary>
            <returns>A mapping from analyzer name to the diagnostics produced by that analyzer</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetDiagnosticDescriptors(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Gets a list of the diagnostics provided by the given <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>.
            </summary>
            <returns>A list of the diagnostics produced by the given analyzer</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.IsCompilerDiagnostic(System.String,Microsoft.CodeAnalysis.Diagnostics.DiagnosticData)">
            <summary>
            Check whether given diagnostic is compiler diagnostic or not
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetCompilerDiagnosticAnalyzer(System.String)">
            <summary>
            Get compiler analyzer for the given language
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.IsCompilerDiagnosticAnalyzer(System.String,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Check whether given <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> is compiler analyzer for the language or not.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetHostAnalyzerReferences">
            <summary>
            Return host <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/>s. (ex, analyzers installed by vsix)
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticService.DiagnosticsUpdated">
            <summary>
            Event to get notified as new diagnostics are discovered by IDiagnosticUpdateSource
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticService.GetDiagnostics(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get current diagnostics stored in IDiagnosticUpdateSource
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticService.GetDiagnosticsUpdatedEventArgs(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Threading.CancellationToken)">
            <summary>
            Get current UpdatedEventArgs stored in IDiagnosticUpdateSource
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticUpdateSource">
            <summary>
            Implement this to participate in diagnostic service framework as one of diagnostic update source
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticUpdateSource.DiagnosticsUpdated">
            <summary>
            Raise this when new diagnostics are found
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticUpdateSource.SupportGetDiagnostics">
            <summary>
            Return true if the source supports GetDiagnostics API otherwise, return false so that the engine can cache data from DiagnosticsUpdated in memory
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticUpdateSource.GetDiagnostics(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get diagnostics stored in the source
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IWorkspaceDiagnosticAnalyzerProviderService.GetHostDiagnosticAnalyzerPackages">
            <summary>
            Gets the analyzers shared across the entire workspace session.
            This includes the analyzers included through VSIX installations.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IWorkspaceDiagnosticAnalyzerProviderService.GetAnalyzerAssemblyLoader">
            <summary>
            Gets the loader for VSIX based analyzer assemblies.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.ISupportLiveUpdate">
            <summary>
            Marker interface to indicate whether given diagnostic args are from live analysis.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.WorkspaceAnalyzerOptions">
            <summary>
            Analyzer options with workspace.
            These are used to fetch the workspace options by our internal analyzers (e.g. simplification analyzer).
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.DocumentDiagnosticAnalyzer">
            <summary>
            IDE-only document based diagnostic analyzer.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DocumentDiagnosticAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <summary>
            it is not allowed one to implement both DocumentDiagnosticAnalzyer and DiagnosticAnalyzer
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.ProjectDiagnosticAnalyzer">
            <summary>
            IDE-only project based diagnostic analyzer.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.ProjectDiagnosticAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <summary>
            it is not allowed one to implement both ProjectDiagnosticAnalzyer and DiagnosticAnalyzer
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FeaturesResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources._0_1">
            <summary>
              Looks up a localized string similar to     {0} - {1}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources._0_Keyword">
            <summary>
              Looks up a localized string similar to {0} Keyword.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Accessing_captured_variable_0_that_hasn_t_been_accessed_before_in_1_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Accessing captured variable &apos;{0}&apos; that hasn&apos;t been accessed before in {1} will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Actions_can_not_be_empty">
            <summary>
              Looks up a localized string similar to Actions can not be empty..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_argument_name_0">
            <summary>
              Looks up a localized string similar to Add argument name &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_both">
            <summary>
              Looks up a localized string similar to Add both.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_braces">
            <summary>
              Looks up a localized string similar to Add braces.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_default_case">
            <summary>
              Looks up a localized string similar to Add default case.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_document_0">
            <summary>
              Looks up a localized string similar to Add document &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_missing_cases">
            <summary>
              Looks up a localized string similar to Add missing cases.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_missing_param_nodes">
            <summary>
              Looks up a localized string similar to Add missing param nodes.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_null_check">
            <summary>
              Looks up a localized string similar to Add null check.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_null_checks">
            <summary>
              Looks up a localized string similar to Add null checks.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_optional_parameters_to_0">
            <summary>
              Looks up a localized string similar to Add optional parameters to &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_parameter_to_0">
            <summary>
              Looks up a localized string similar to Add parameter to &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_parameters_to_0">
            <summary>
              Looks up a localized string similar to Add parameters to &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_project_reference_to_0">
            <summary>
              Looks up a localized string similar to Add project reference to &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_reference_to_0">
            <summary>
              Looks up a localized string similar to Add reference to &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_string_IsNullOrEmpty_check">
            <summary>
              Looks up a localized string similar to Add &apos;string.IsNullOrEmpty&apos; check.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_string_IsNullOrWhiteSpace_check">
            <summary>
              Looks up a localized string similar to Add &apos;string.IsNullOrWhiteSpace&apos; check.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Add_this_or_Me_qualification">
            <summary>
              Looks up a localized string similar to Add &apos;this&apos; or &apos;Me&apos; qualification..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Adding_0_around_an_active_statement_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Adding &apos;{0}&apos; around an active statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Adding_0_into_a_1_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Adding &apos;{0}&apos; into a &apos;{1}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Adding_0_into_a_class_with_explicit_or_sequential_layout_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Adding &apos;{0}&apos; into a class with explicit or sequential layout will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Adding_0_that_accesses_captured_variables_1_and_2_declared_in_different_scopes_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Adding &apos;{0}&apos; that accesses captured variables &apos;{1}&apos; and &apos;{2}&apos; declared in different scopes will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Adding_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Adding &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Adding_0_with_the_Handles_clause_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Adding &apos;{0}&apos; with the Handles clause will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Adding_a_constructor_to_a_type_with_a_field_or_property_initializer_that_contains_an_anonymous_function_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Adding a constructor to a type with a field or property initializer that contains an anonymous function will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Adding_a_generic_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Adding a generic &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Adding_a_method_body_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Adding a method body will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Adding_a_MustOverride_0_or_overriding_an_inherited_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Adding a MustOverride &apos;{0}&apos; or overriding an inherited &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Adding_a_new_file_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Adding a new file will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Adding_a_user_defined_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Adding a user defined &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Adding_an_abstract_0_or_overriding_an_inherited_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Adding an abstract &apos;{0}&apos; or overriding an inherited &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Adding_an_extern_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Adding an extern &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Adding_an_imported_method_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Adding an imported method will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.All_lowercase">
            <summary>
              Looks up a localized string similar to All lowercase.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.All_uppercase">
            <summary>
              Looks up a localized string similar to All uppercase.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.An_active_statement_has_been_removed_from_its_original_method_You_must_revert_your_changes_to_continue_or_restart_the_debugging_session">
            <summary>
              Looks up a localized string similar to An active statement has been removed from its original method. You must revert your changes to continue or restart the debugging session..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.An_instance_of_analyzer_0_cannot_be_created_from_1_colon_2">
            <summary>
              Looks up a localized string similar to An instance of analyzer {0} cannot be created from {1}: {2}..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Analyzer_0_threw_an_exception_of_type_1_with_message_2">
            <summary>
              Looks up a localized string similar to Analyzer &apos;{0}&apos; threw an exception of type &apos;{1}&apos; with message &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Analyzer_0_threw_the_following_exception_colon_1">
             <summary>
               Looks up a localized string similar to Analyzer &apos;{0}&apos; threw the following exception:
            &apos;{1}&apos;..
             </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Anonymous_Types_colon">
            <summary>
              Looks up a localized string similar to Anonymous Types:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Argument_cannot_be_empty">
            <summary>
              Looks up a localized string similar to Argument cannot be empty..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Argument_cannot_have_a_null_element">
            <summary>
              Looks up a localized string similar to Argument cannot have a null element..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Assembly">
            <summary>
              Looks up a localized string similar to Assembly.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Assigning_to_readonly_fields_must_be_done_in_a_constructor_colon_bracket_0_bracket">
            <summary>
              Looks up a localized string similar to Assigning to readonly fields must be done in a constructor : [{0}]..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Asynchronous_method_cannot_have_ref_out_parameters_colon_bracket_0_bracket">
            <summary>
              Looks up a localized string similar to Asynchronous method cannot have ref/out parameters : [{0}].
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Attempt_to_connect_to_process_Sharp_0_failed_retrying">
            <summary>
              Looks up a localized string similar to Attempt to connect to process #{0} failed, retrying ....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.attribute">
            <summary>
              Looks up a localized string similar to attribute.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Attribute_0_is_missing_Updating_an_async_method_or_an_iterator_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Attribute &apos;{0}&apos; is missing. Updating an async method or an iterator will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.auto_property">
            <summary>
              Looks up a localized string similar to auto-property.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Available">
            <summary>
              Looks up a localized string similar to Available.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Awaited_task_returns">
            <summary>
              Looks up a localized string similar to Awaited task returns.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.can_t_not_construct_final_tree">
            <summary>
              Looks up a localized string similar to can&apos;t not construct final tree.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Cannot_resolve_reference_0">
            <summary>
              Looks up a localized string similar to Cannot resolve reference &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Capturing_variable_0_that_hasn_t_been_captured_before_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Capturing variable &apos;{0}&apos; that hasn&apos;t been captured before will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Ceasing_to_access_captured_variable_0_in_1_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Ceasing to access captured variable &apos;{0}&apos; in {1} will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Ceasing_to_capture_variable_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Ceasing to capture variable &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Change_0_to_1">
            <summary>
              Looks up a localized string similar to Change &apos;{0}&apos; to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Change_signature">
            <summary>
              Looks up a localized string similar to Change signature....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Changes_to_expression_trees_may_result_in_behavior_changes_at_runtime">
            <summary>
              Looks up a localized string similar to Changes to expression trees may result in behavior changes at runtime.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Changing_the_constraint_from_0_to_1_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Changing the constraint from &apos;{0}&apos; to &apos;{1}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Changing_the_declaration_scope_of_a_captured_variable_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Changing the declaration scope of a captured variable &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Changing_the_parameters_of_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Changing the parameters of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Changing_the_return_type_of_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Changing the return type of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Changing_the_type_of_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Changing the type of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Changing_the_type_of_a_captured_variable_0_previously_of_type_1_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Changing the type of a captured variable &apos;{0}&apos; previously of type &apos;{1}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Changing_visibility_of_a_constructor_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Changing visibility of a constructor will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.class_">
            <summary>
              Looks up a localized string similar to class.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Classes">
            <summary>
              Looks up a localized string similar to Classes.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Collection_initialization_can_be_simplified">
            <summary>
              Looks up a localized string similar to Collection initialization can be simplified.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Compiler1">
            <summary>
              Looks up a localized string similar to Compiler.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Compiler2">
            <summary>
              Looks up a localized string similar to Compiler.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Computing_fix_all_occurrences_code_fix">
            <summary>
              Looks up a localized string similar to Computing fix all occurrences code fix....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.const_field">
            <summary>
              Looks up a localized string similar to const field.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.constant">
            <summary>
              Looks up a localized string similar to constant.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Constants">
            <summary>
              Looks up a localized string similar to Constants.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.constructor">
            <summary>
              Looks up a localized string similar to constructor.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Convert_to_binary">
            <summary>
              Looks up a localized string similar to Convert to binary.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Convert_to_decimal">
            <summary>
              Looks up a localized string similar to Convert to decimal.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Convert_to_hex">
            <summary>
              Looks up a localized string similar to Convert to hex.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Convert_to_interpolated_string">
            <summary>
              Looks up a localized string similar to Convert to interpolated string.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Could_not_extract_interface_colon_The_selection_is_not_inside_a_class_interface_struct">
            <summary>
              Looks up a localized string similar to Could not extract interface: The selection is not inside a class/interface/struct..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Could_not_extract_interface_colon_The_type_does_not_contain_any_member_that_can_be_extracted_to_an_interface">
            <summary>
              Looks up a localized string similar to Could not extract interface: The type does not contain any member that can be extracted to an interface..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Create_and_initialize_field_0">
            <summary>
              Looks up a localized string similar to Create and initialize field &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Create_and_initialize_property_0">
            <summary>
              Looks up a localized string similar to Create and initialize property &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.default_expression_can_be_simplified">
            <summary>
              Looks up a localized string similar to &apos;default&apos; expression can be simplified.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.delegate_">
            <summary>
              Looks up a localized string similar to delegate.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Delegates">
            <summary>
              Looks up a localized string similar to Delegates.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Deleting_0_around_an_active_statement_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Deleting &apos;{0}&apos; around an active statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Deleting_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Deleting &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Deleting_a_method_body_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Deleting a method body will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Deleting_captured_variable_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Deleting captured variable &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Document">
            <summary>
              Looks up a localized string similar to Document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Edit_And_Continue">
            <summary>
              Looks up a localized string similar to Edit And Continue.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Edit_and_Continue1">
            <summary>
              Looks up a localized string similar to Edit and Continue.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Edit_and_Continue2">
            <summary>
              Looks up a localized string similar to Edit and Continue.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Encapsulate_field_colon_0_and_use_property">
            <summary>
              Looks up a localized string similar to Encapsulate field: &apos;{0}&apos; (and use property).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Encapsulate_field_colon_0_but_still_use_field">
            <summary>
              Looks up a localized string similar to Encapsulate field: &apos;{0}&apos; (but still use field).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Encapsulate_fields_and_use_property">
            <summary>
              Looks up a localized string similar to Encapsulate fields (and use property).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Encapsulate_fields_but_still_use_field">
            <summary>
              Looks up a localized string similar to Encapsulate fields (but still use field).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.enum_">
            <summary>
              Looks up a localized string similar to enum.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.enum_value">
            <summary>
              Looks up a localized string similar to enum value.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Enums">
            <summary>
              Looks up a localized string similar to Enums.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.event_">
            <summary>
              Looks up a localized string similar to event.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.event_accessor">
            <summary>
              Looks up a localized string similar to event accessor.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Events">
            <summary>
              Looks up a localized string similar to Events.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Exceptions_colon">
            <summary>
              Looks up a localized string similar to Exceptions:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Extension_methods">
            <summary>
              Looks up a localized string similar to Extension methods.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Extract_Interface">
            <summary>
              Looks up a localized string similar to Extract Interface....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Extract_Method">
            <summary>
              Looks up a localized string similar to Extract Method.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Extract_Method_plus_Local">
            <summary>
              Looks up a localized string similar to Extract Method + Local.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Failed_to_create_a_remote_process_for_interactive_code_execution">
            <summary>
              Looks up a localized string similar to Failed to create a remote process for interactive code execution..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Failed_to_initialize_remote_interactive_process">
            <summary>
              Looks up a localized string similar to Failed to initialize remote interactive process..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Failed_to_launch_0_process_exit_code_colon_1_with_output_colon">
            <summary>
              Looks up a localized string similar to Failed to launch &apos;{0}&apos; process (exit code: {1}) with output: .
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.field">
            <summary>
              Looks up a localized string similar to field.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Fields">
            <summary>
              Looks up a localized string similar to Fields.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Find_and_install_latest_version">
            <summary>
              Looks up a localized string similar to Find and install latest version.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Find_and_install_latest_version_of_0">
            <summary>
              Looks up a localized string similar to Find and install latest version of &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.First_word_capitalized">
            <summary>
              Looks up a localized string similar to First word capitalized.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Fix_all_occurrences">
            <summary>
              Looks up a localized string similar to Fix all occurrences.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Fix_Name_Violation_colon_0">
            <summary>
              Looks up a localized string similar to Fix Name Violation: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.from_0">
            <summary>
              Looks up a localized string similar to from {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Fully_qualify_0">
            <summary>
              Looks up a localized string similar to Fully qualify &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_0_1">
            <summary>
              Looks up a localized string similar to Generate {0} &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_0_1_in_new_file">
            <summary>
              Looks up a localized string similar to Generate {0} &apos;{1}&apos; in new file.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_abstract_method_1_0">
            <summary>
              Looks up a localized string similar to Generate abstract method &apos;{1}.{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_abstract_property_1_0">
            <summary>
              Looks up a localized string similar to Generate abstract property &apos;{1}.{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_all">
            <summary>
              Looks up a localized string similar to Generate all.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_constant_1_0">
            <summary>
              Looks up a localized string similar to Generate constant &apos;{1}.{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_constructor">
            <summary>
              Looks up a localized string similar to Generate constructor....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_constructor_0_1">
            <summary>
              Looks up a localized string similar to Generate constructor &apos;{0}({1})&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_constructor_in_0">
            <summary>
              Looks up a localized string similar to Generate constructor in &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_delegating_constructor_0_1">
            <summary>
              Looks up a localized string similar to Generate delegating constructor &apos;{0}({1})&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_enum_member_1_0">
            <summary>
              Looks up a localized string similar to Generate enum member &apos;{1}.{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_Equals_and_GetHashCode">
            <summary>
              Looks up a localized string similar to Generate Equals and GetHashCode.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_Equals_object">
            <summary>
              Looks up a localized string similar to Generate Equals(object).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_field_1_0">
            <summary>
              Looks up a localized string similar to Generate field &apos;{1}.{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_field_assigning_constructor_0_1">
            <summary>
              Looks up a localized string similar to Generate field assigning constructor &apos;{0}({1})&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_GetHashCode">
            <summary>
              Looks up a localized string similar to Generate GetHashCode().
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_local_0">
            <summary>
              Looks up a localized string similar to Generate local &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_method_1_0">
            <summary>
              Looks up a localized string similar to Generate method &apos;{1}.{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_nested_0_1">
            <summary>
              Looks up a localized string similar to Generate nested {0} &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_new_type">
            <summary>
              Looks up a localized string similar to Generate new type....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_operators">
            <summary>
              Looks up a localized string similar to Generate operators.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_overrides">
            <summary>
              Looks up a localized string similar to Generate overrides....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_property_1_0">
            <summary>
              Looks up a localized string similar to Generate property &apos;{1}.{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_read_only_field_1_0">
            <summary>
              Looks up a localized string similar to Generate read-only field &apos;{1}.{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_read_only_property_1_0">
            <summary>
              Looks up a localized string similar to Generate read-only property &apos;{1}.{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_type_0">
            <summary>
              Looks up a localized string similar to Generate type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_variable_0">
            <summary>
              Looks up a localized string similar to Generate variable &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.generated_code_is_overlapping_with_hidden_portion_of_the_code">
            <summary>
              Looks up a localized string similar to generated code is overlapping with hidden portion of the code.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.generating_source_for_symbols_of_this_type_is_not_supported">
            <summary>
              Looks up a localized string similar to generating source for symbols of this type is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.generic_overload">
            <summary>
              Looks up a localized string similar to generic overload.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.generic_overloads">
            <summary>
              Looks up a localized string similar to generic overloads.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Global_Namespace">
            <summary>
              Looks up a localized string similar to Global Namespace.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Hosting_process_exited_with_exit_code_0">
            <summary>
              Looks up a localized string similar to Hosting process exited with exit code {0}..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Implement_0">
            <summary>
              Looks up a localized string similar to Implement {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Implement_Abstract_Class">
            <summary>
              Looks up a localized string similar to Implement Abstract Class.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Implement_interface">
            <summary>
              Looks up a localized string similar to Implement interface.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Implement_interface_abstractly">
            <summary>
              Looks up a localized string similar to Implement interface abstractly.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Implement_interface_explicitly">
            <summary>
              Looks up a localized string similar to Implement interface explicitly.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Implement_interface_explicitly_with_Dispose_pattern">
            <summary>
              Looks up a localized string similar to Implement interface explicitly with Dispose pattern.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Implement_interface_through_0">
            <summary>
              Looks up a localized string similar to Implement interface through &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Implement_interface_with_Dispose_pattern">
            <summary>
              Looks up a localized string similar to Implement interface with Dispose pattern.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.in_">
            <summary>
              Looks up a localized string similar to in.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.in_Source">
            <summary>
              Looks up a localized string similar to in Source.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.in_Suppression_File">
            <summary>
              Looks up a localized string similar to in Suppression File.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Initialize_field_0">
            <summary>
              Looks up a localized string similar to Initialize field &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Initialize_property_0">
            <summary>
              Looks up a localized string similar to Initialize property &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Inline_variable_declaration">
            <summary>
              Looks up a localized string similar to Inline variable declaration.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Install_0_1">
            <summary>
              Looks up a localized string similar to Install &apos;{0} {1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Install_package_0">
            <summary>
              Looks up a localized string similar to Install package &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Install_version_0">
            <summary>
              Looks up a localized string similar to Install version &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Install_with_package_manager">
            <summary>
              Looks up a localized string similar to Install with package manager....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Interactive_Host_not_initialized">
            <summary>
              Looks up a localized string similar to Interactive Host not initialized..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.interface_">
            <summary>
              Looks up a localized string similar to interface.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Interfaces">
            <summary>
              Looks up a localized string similar to Interfaces.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Introduce_constant_for_0">
            <summary>
              Looks up a localized string similar to Introduce constant for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Introduce_constant_for_all_occurrences_of_0">
            <summary>
              Looks up a localized string similar to Introduce constant for all occurrences of &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Introduce_field_for_0">
            <summary>
              Looks up a localized string similar to Introduce field for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Introduce_field_for_all_occurrences_of_0">
            <summary>
              Looks up a localized string similar to Introduce field for all occurrences of &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Introduce_local_constant_for_0">
            <summary>
              Looks up a localized string similar to Introduce local constant for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Introduce_local_constant_for_all_occurrences_of_0">
            <summary>
              Looks up a localized string similar to Introduce local constant for all occurrences of &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Introduce_local_for_0">
            <summary>
              Looks up a localized string similar to Introduce local for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Introduce_local_for_all_occurrences_of_0">
            <summary>
              Looks up a localized string similar to Introduce local for all occurrences of &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Introduce_query_variable_for_0">
            <summary>
              Looks up a localized string similar to Introduce query variable for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Introduce_query_variable_for_all_occurrences_of_0">
            <summary>
              Looks up a localized string similar to Introduce query variable for all occurrences of &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.is_">
            <summary>
              Looks up a localized string similar to is.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Keywords">
            <summary>
              Looks up a localized string similar to Keywords.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.label">
            <summary>
              Looks up a localized string similar to label.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Live">
            <summary>
              Looks up a localized string similar to Live.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Loading_context_from_0">
            <summary>
              Looks up a localized string similar to Loading context from &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.local_constant">
            <summary>
              Looks up a localized string similar to local constant.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.local_variable">
            <summary>
              Looks up a localized string similar to local variable.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Locals">
            <summary>
              Looks up a localized string similar to Locals.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Locals_and_parameters">
            <summary>
              Looks up a localized string similar to Locals and parameters.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.location_unknown">
            <summary>
              Looks up a localized string similar to location unknown.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Make_containing_scope_async">
            <summary>
              Looks up a localized string similar to Make containing scope async.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Make_containing_scope_async_return_Task">
            <summary>
              Looks up a localized string similar to Make containing scope async (return Task).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Make_method_synchronous">
            <summary>
              Looks up a localized string similar to Make method synchronous..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.method">
            <summary>
              Looks up a localized string similar to method.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Method_referenced_implicitly">
            <summary>
              Looks up a localized string similar to Method referenced implicitly.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Methods">
            <summary>
              Looks up a localized string similar to Methods.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Modifying_0_which_contains_a_static_variable_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Modifying &apos;{0}&apos; which contains a static variable will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Modifying_0_which_contains_an_Aggregate_Group_By_or_Join_query_clauses_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Modifying &apos;{0}&apos; which contains an Aggregate, Group By, or Join query clauses will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Modifying_0_which_contains_the_stackalloc_operator_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Modifying &apos;{0}&apos; which contains the &apos;stackalloc&apos; operator will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Modifying_a_catch_finally_handler_with_an_active_statement_in_the_try_block_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Modifying a catch/finally handler with an active statement in the try block will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Modifying_a_catch_handler_around_an_active_statement_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Modifying a catch handler around an active statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Modifying_a_generic_method_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Modifying a generic method will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Modifying_a_method_inside_the_context_of_a_generic_type_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Modifying a method inside the context of a generic type will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Modifying_a_try_catch_finally_statement_when_the_finally_block_is_active_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Modifying a try/catch/finally statement when the finally block is active will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Modifying_an_active_0_which_contains_On_Error_or_Resume_statements_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Modifying an active &apos;{0}&apos; which contains &apos;On Error&apos; or &apos;Resume&apos; statements will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Modifying_source_with_experimental_language_features_enabled_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Modifying source with experimental language features enabled will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Modifying_the_initializer_of_0_in_a_generic_type_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Modifying the initializer of &apos;{0}&apos; in a generic type will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Modifying_the_initializer_of_0_in_a_partial_type_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Modifying the initializer of &apos;{0}&apos; in a partial type will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Modifying_whitespace_or_comments_in_0_inside_the_context_of_a_generic_type_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Modifying whitespace or comments in &apos;{0}&apos; inside the context of a generic type will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Modifying_whitespace_or_comments_in_a_generic_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Modifying whitespace or comments in a generic &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Modules">
            <summary>
              Looks up a localized string similar to Modules.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Move_type_to_0">
            <summary>
              Looks up a localized string similar to Move type to {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Moving_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Moving &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.namespace_">
            <summary>
              Looks up a localized string similar to namespace.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Namespaces">
            <summary>
              Looks up a localized string similar to Namespaces.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Naming_rule_violation_0">
            <summary>
              Looks up a localized string similar to Naming rule violation: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Naming_Styles">
            <summary>
              Looks up a localized string similar to Naming Styles.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.no_value">
            <summary>
              Looks up a localized string similar to no value..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Non_invoked_method_cannot_be_replaced_with_property">
            <summary>
              Looks up a localized string similar to Non-invoked method cannot be replaced with property..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Not_Available">
            <summary>
              Looks up a localized string similar to Not Available.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Note_colon_Tab_twice_to_insert_the_0_snippet">
            <summary>
              Looks up a localized string similar to Note: Tab twice to insert the &apos;{0}&apos; snippet..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Null_check_can_be_simplified">
            <summary>
              Looks up a localized string similar to Null check can be simplified.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Object_initialization_can_be_simplified">
            <summary>
              Looks up a localized string similar to Object initialization can be simplified.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Only_methods_with_a_single_argument_which_is_not_an_out_variable_declaration_can_be_replaced_with_a_property">
            <summary>
              Looks up a localized string similar to Only methods with a single argument, which is not an out variable declaration, can be replaced with a property..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.operator_">
            <summary>
              Looks up a localized string similar to operator.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.overload">
            <summary>
              Looks up a localized string similar to overload.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.overloads_">
            <summary>
              Looks up a localized string similar to overloads.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.parameter">
            <summary>
              Looks up a localized string similar to parameter.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Parameters_colon">
            <summary>
              Looks up a localized string similar to Parameters:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Parameters_type_or_return_type_cannot_be_an_anonymous_type_colon_bracket_0_bracket">
            <summary>
              Looks up a localized string similar to Parameters&apos; type or return type cannot be an anonymous type : [{0}].
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.paren_Unknown_paren">
            <summary>
              Looks up a localized string similar to (Unknown).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Pascal_Case">
            <summary>
              Looks up a localized string similar to Pascal Case.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Pending">
            <summary>
              Looks up a localized string similar to &lt;Pending&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Pick_members_to_be_used_as_constructor_parameters">
            <summary>
              Looks up a localized string similar to Pick members to be used as constructor parameters.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Pick_members_to_be_used_in_Equals_GetHashCode">
            <summary>
              Looks up a localized string similar to Pick members to be used in Equals/GetHashCode.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Pick_members_to_override">
            <summary>
              Looks up a localized string similar to Pick members to override.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.plus_additional_0_1">
            <summary>
              Looks up a localized string similar to  + additional {0} {1}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Prefer_explicitly_provided_tuple_element_name">
            <summary>
              Looks up a localized string similar to Prefer explicitly provided tuple element name.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Project">
            <summary>
              Looks up a localized string similar to Project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.project_space">
            <summary>
              Looks up a localized string similar to project .
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Properties">
            <summary>
              Looks up a localized string similar to Properties.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.property_">
            <summary>
              Looks up a localized string similar to property.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Property_cannot_safely_be_replaced_with_a_method_call">
            <summary>
              Looks up a localized string similar to Property cannot safely be replaced with a method call.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Property_referenced_implicitly">
            <summary>
              Looks up a localized string similar to Property referenced implicitly.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.range_variable">
            <summary>
              Looks up a localized string similar to range variable.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Re_triage_0_currently_1">
            <summary>
              Looks up a localized string similar to Re-triage {0}(currently &apos;{1}&apos;).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Remarks_colon">
            <summary>
              Looks up a localized string similar to Remarks:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Remove_document_0">
            <summary>
              Looks up a localized string similar to Remove document &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Remove_qualification">
            <summary>
              Looks up a localized string similar to Remove qualification.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Remove_reference_to_0">
            <summary>
              Looks up a localized string similar to Remove reference to &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Remove_separators">
            <summary>
              Looks up a localized string similar to Remove separators.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Remove_Suppression">
            <summary>
              Looks up a localized string similar to Remove Suppression.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Remove_Suppression_0">
            <summary>
              Looks up a localized string similar to Remove Suppression {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Remove_tag">
            <summary>
              Looks up a localized string similar to Remove tag.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Remove_Unnecessary_Cast">
            <summary>
              Looks up a localized string similar to Remove Unnecessary Cast.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Remove_unused_variable">
            <summary>
              Looks up a localized string similar to Remove unused variable.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Removing_0_that_accessed_captured_variables_1_and_2_declared_in_different_scopes_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Removing &apos;{0}&apos; that accessed captured variables &apos;{1}&apos; and &apos;{2}&apos; declared in different scopes will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Removing_0_that_contains_an_active_statement_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Removing &apos;{0}&apos; that contains an active statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Rename_file_to_0">
            <summary>
              Looks up a localized string similar to Rename file to {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Rename_type_to_0">
            <summary>
              Looks up a localized string similar to Rename type to {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Renaming_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Renaming &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Renaming_a_captured_variable_from_0_to_1_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Renaming a captured variable, from &apos;{0}&apos; to &apos;{1}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Replace_0_and_1_with_property">
            <summary>
              Looks up a localized string similar to Replace &apos;{0}&apos; and &apos;{1}&apos; with property.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Replace_0_with_method">
            <summary>
              Looks up a localized string similar to Replace &apos;{0}&apos; with method.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Replace_0_with_methods">
            <summary>
              Looks up a localized string similar to Replace &apos;{0}&apos; with methods.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Replace_0_with_property">
            <summary>
              Looks up a localized string similar to Replace &apos;{0}&apos; with property.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Reported_diagnostic_0_has_a_source_location_1_in_file_2_which_is_outside_of_the_given_file">
            <summary>
              Looks up a localized string similar to Reported diagnostic &apos;{0}&apos; has a source location &apos;{1}&apos; in file &apos;{2}&apos;, which is outside of the given file..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Reported_diagnostic_0_has_a_source_location_in_file_1_which_is_not_part_of_the_compilation_being_analyzed">
            <summary>
              Looks up a localized string similar to Reported diagnostic &apos;{0}&apos; has a source location in file &apos;{1}&apos;, which is not part of the compilation being analyzed..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Reported_diagnostic_with_ID_0_is_not_supported_by_the_analyzer">
            <summary>
              Looks up a localized string similar to Reported diagnostic with ID &apos;{0}&apos; is not supported by the analyzer..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Represents_an_object_whose_operations_will_be_resolved_at_runtime">
            <summary>
              Looks up a localized string similar to Represents an object whose operations will be resolved at runtime..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Requested_assembly_already_loaded_from_0">
            <summary>
              Looks up a localized string similar to Requested assembly already loaded from &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Returns_colon">
            <summary>
              Looks up a localized string similar to Returns:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Roslyn_HostError">
            <summary>
              Looks up a localized string similar to Roslyn.HostError.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Searched_in_directories_colon">
            <summary>
              Looks up a localized string similar to Searched in directories:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Searched_in_directory_colon">
            <summary>
              Looks up a localized string similar to Searched in directory:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Separate_nibbles">
            <summary>
              Looks up a localized string similar to Separate nibbles.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Separate_thousands">
            <summary>
              Looks up a localized string similar to Separate thousands.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Separate_words">
            <summary>
              Looks up a localized string similar to Separate words.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Simplify_collection_initialization">
            <summary>
              Looks up a localized string similar to Simplify collection initialization.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Simplify_default_expression">
            <summary>
              Looks up a localized string similar to Simplify &apos;default&apos; expression.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Simplify_Member_Access">
            <summary>
              Looks up a localized string similar to Simplify Member Access.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Simplify_Names">
            <summary>
              Looks up a localized string similar to Simplify Names.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Simplify_object_initialization">
            <summary>
              Looks up a localized string similar to Simplify object initialization.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Snippets">
            <summary>
              Looks up a localized string similar to Snippets.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Solution">
            <summary>
              Looks up a localized string similar to Solution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Specified_file_not_found">
            <summary>
              Looks up a localized string similar to Specified file not found..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Specified_file_not_found_colon_0">
            <summary>
              Looks up a localized string similar to Specified file not found: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Spell_check_0">
            <summary>
              Looks up a localized string similar to Spell check &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Structures">
            <summary>
              Looks up a localized string similar to Structures.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Style">
            <summary>
              Looks up a localized string similar to Style.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Summary_colon">
            <summary>
              Looks up a localized string similar to Summary:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Suppress_0">
            <summary>
              Looks up a localized string similar to Suppress {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Take_0">
            <summary>
              Looks up a localized string similar to Take &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Take_both">
            <summary>
              Looks up a localized string similar to Take both.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Take_bottom">
            <summary>
              Looks up a localized string similar to Take bottom.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Take_top">
            <summary>
              Looks up a localized string similar to Take top.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.The_address_of_a_variable_is_used_inside_the_selected_code">
            <summary>
              Looks up a localized string similar to The address of a variable is used inside the selected code..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.The_assembly_0_does_not_contain_any_analyzers">
            <summary>
              Looks up a localized string similar to The assembly {0} does not contain any analyzers..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.The_member_is_defined_in_metadata">
            <summary>
              Looks up a localized string similar to The member is defined in metadata..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.The_selection_contains_an_error_or_unknown_type">
            <summary>
              Looks up a localized string similar to The selection contains an error or unknown type..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.The_selection_contains_no_active_statement">
            <summary>
              Looks up a localized string similar to The selection contains no active statement..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.The_symbol_does_not_have_an_icon">
            <summary>
              Looks up a localized string similar to The symbol does not have an icon..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.This_signature_does_not_contain_parameters_that_can_be_changed">
            <summary>
              Looks up a localized string similar to This signature does not contain parameters that can be changed..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.This_symbol_has_related_definitions_or_references_in_metadata_Changing_its_signature_may_result_in_build_errors_Do_you_want_to_continue">
             <summary>
               Looks up a localized string similar to This symbol has related definitions or references in metadata. Changing its signature may result in build errors.
            
            Do you want to continue?.
             </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.To_detect_redundant_calls">
            <summary>
              Looks up a localized string similar to To detect redundant calls.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.TODO_colon_dispose_managed_state_managed_objects">
            <summary>
              Looks up a localized string similar to TODO: dispose managed state (managed objects)..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.TODO_colon_set_large_fields_to_null">
            <summary>
              Looks up a localized string similar to TODO: set large fields to null..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.type_constraint">
            <summary>
              Looks up a localized string similar to type constraint.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.type_parameter">
            <summary>
              Looks up a localized string similar to type parameter.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Type_parameter_0_is_hidden_by_another_type_parameter_1">
            <summary>
              Looks up a localized string similar to Type parameter &apos;{0}&apos; is hidden by another type parameter &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Type_parameters_colon">
            <summary>
              Looks up a localized string similar to Type parameters:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Type_Sharphelp_for_more_information">
            <summary>
              Looks up a localized string similar to Type &quot;#help&quot; for more information..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.type_space">
            <summary>
              Looks up a localized string similar to type .
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Unable_to_create_hosting_process">
            <summary>
              Looks up a localized string similar to Unable to create hosting process..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Unable_to_load_Analyzer_assembly_0_colon_1">
            <summary>
              Looks up a localized string similar to Unable to load Analyzer assembly {0}: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Unexpected_interface_member_kind_colon_0">
            <summary>
              Looks up a localized string similar to Unexpected interface member kind: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Unknown">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Unknown_error_occurred">
            <summary>
              Looks up a localized string similar to Unknown error occurred.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Unknown_symbol_kind">
            <summary>
              Looks up a localized string similar to Unknown symbol kind.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_a_0_statement_around_an_active_statement_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating a &apos;{0}&apos; statement around an active statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_a_complex_statement_containing_an_await_expression_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating a complex statement containing an await expression will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_a_field_to_an_event_or_vice_versa_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating a field to an event or vice versa will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_an_active_statement_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating an active statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_async_or_iterator_modifier_around_an_active_statement_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating async or iterator modifier around an active statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_the_alias_of_Declare_Statement_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating the alias of Declare Statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_the_base_class_and_or_base_interface_s_of_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating the base class and/or base interface(s) of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_the_Handles_clause_of_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating the Handles clause of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_the_Implements_clause_of_a_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating the Implements clause of a &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_the_initializer_of_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating the initializer of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_the_kind_of_a_method_Sub_Function_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating the kind of a method (Sub/Function) will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_the_kind_of_a_type_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating the kind of a type will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_the_kind_of_an_property_event_accessor_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating the kind of an property/event accessor will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_the_library_name_of_Declare_Statement_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating the library name of Declare Statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_the_modifiers_of_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating the modifiers of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_the_size_of_a_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating the size of a &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_the_type_of_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating the type of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_the_underlying_type_of_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating the underlying type of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Updating_the_variance_of_0_will_prevent_the_debug_session_from_continuing">
            <summary>
              Looks up a localized string similar to Updating the variance of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_auto_property">
            <summary>
              Looks up a localized string similar to Use auto property.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_block_body_for_accessors">
            <summary>
              Looks up a localized string similar to Use block body for accessors.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_block_body_for_constructors">
            <summary>
              Looks up a localized string similar to Use block body for constructors.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_block_body_for_indexers">
            <summary>
              Looks up a localized string similar to Use block body for indexers.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_block_body_for_methods">
            <summary>
              Looks up a localized string similar to Use block body for methods.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_block_body_for_operators">
            <summary>
              Looks up a localized string similar to Use block body for operators.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_block_body_for_properties">
            <summary>
              Looks up a localized string similar to Use block body for properties.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_coalesce_expression">
            <summary>
              Looks up a localized string similar to Use coalesce expression.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_explicitly_provided_tuple_name">
            <summary>
              Looks up a localized string similar to Use explicitly provided tuple name.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_expression_body_for_accessors">
            <summary>
              Looks up a localized string similar to Use expression body for accessors.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_expression_body_for_constructors">
            <summary>
              Looks up a localized string similar to Use expression body for constructors.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_expression_body_for_indexers">
            <summary>
              Looks up a localized string similar to Use expression body for indexers.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_expression_body_for_methods">
            <summary>
              Looks up a localized string similar to Use expression body for methods.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_expression_body_for_operators">
            <summary>
              Looks up a localized string similar to Use expression body for operators.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_expression_body_for_properties">
            <summary>
              Looks up a localized string similar to Use expression body for properties.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_framework_type">
            <summary>
              Looks up a localized string similar to Use framework type.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_local_version_0">
            <summary>
              Looks up a localized string similar to Use local version &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_locally_installed_0_version_1_This_version_used_in_colon_2">
             <summary>
               Looks up a localized string similar to Use locally installed &apos;{0}&apos; version &apos;{1}&apos;
            This version used in: {2}.
             </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_null_propagation">
            <summary>
              Looks up a localized string similar to Use null propagation.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_pattern_matching">
            <summary>
              Looks up a localized string similar to Use pattern matching.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Use_throw_expression">
            <summary>
              Looks up a localized string similar to Use &apos;throw&apos; expression.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.User_Diagnostic_Analyzer_Failure">
            <summary>
              Looks up a localized string similar to User Diagnostic Analyzer Failure..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Variable_declaration_can_be_inlined">
            <summary>
              Looks up a localized string similar to Variable declaration can be inlined.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Variadic_SignatureHelpItem_must_have_at_least_one_parameter">
            <summary>
              Looks up a localized string similar to Variadic SignatureHelpItem must have at least one parameter..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.You_can_only_change_the_signature_of_a_constructor_indexer_method_or_delegate">
            <summary>
              Looks up a localized string similar to You can only change the signature of a constructor, indexer, method or delegate..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.You_can_use_the_navigation_bar_to_switch_context">
            <summary>
              Looks up a localized string similar to You can use the navigation bar to switch context..
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindUsages.DefinitionItem">
            <summary>
            Information about a symbol's definition that can be displayed in an editor
            and used for navigation.
            
            Standard implmentations can be obtained through the various <see cref="T:Microsoft.CodeAnalysis.FindUsages.DefinitionItem"/>.Create
            overloads.
            
            Subclassing is also supported for scenarios that fall outside the bounds of
            these common cases.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindUsages.DefinitionItem.MetadataSymbolKey">
            <summary>
            For metadata symbols we encode information in the <see cref="P:Microsoft.CodeAnalysis.FindUsages.DefinitionItem.Properties"/> so we can 
            retrieve the symbol later on when navigating.  This is needed so that we can go to
            metadata-as-source for metadata symbols.  We need to store the <see cref="T:Microsoft.CodeAnalysis.SymbolKey"/>
            for the symbol and the name we get back from  <see cref="M:Microsoft.CodeAnalysis.AssemblyIdentity.GetDisplayName(System.Boolean)"/>
            for.  With these we can effetively recover the symbol.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindUsages.DefinitionItem.NonNavigable">
            <summary>
            If this item is something that cannot be navigated to.  We store this in our
            <see cref="P:Microsoft.CodeAnalysis.FindUsages.DefinitionItem.Properties"/> to act as an explicit marker that navigation is not possible.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindUsages.DefinitionItem.Tags">
            <summary>
            Descriptive tags from <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionTags"/>. These tags may influence how the 
            item is displayed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindUsages.DefinitionItem.Properties">
            <summary>
            Additional properties that can be attached to the definition for clients that want to
            keep track of additional data.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindUsages.DefinitionItem.NameDisplayParts">
            <summary>
            The DisplayParts just for the name of this definition.  Generally used only for 
            error messages.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindUsages.DefinitionItem.DisplayParts">
            <summary>
            The full display parts for this definition.  Displayed in a classified 
            manner when possible.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindUsages.DefinitionItem.OriginationParts">
            <summary>
            Where the location originally came from (for example, the containing assembly or
            project name).  May be used in the presentation of a definition.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindUsages.DefinitionItem.SourceSpans">
            <summary>
            Additional locations to present in the UI.  A definition may have multiple locations 
            for cases like partial types/members.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindUsages.DefinitionItem.DisplayIfNoReferences">
            <summary>
            Whether or not this definition should be presented if we never found any references to
            it.  For example, when searching for a property, the FindReferences engine will cascade
            to the accessors in case any code specifically called those accessors (can happen in 
            cross-language cases).  However, in the normal case where there were no calls specifically
            to the accessor, we would not want to display them in the UI.  
            
            For most definitions we will want to display them, even if no references were found.  
            This property allows for this customization in behavior.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindUsages.DefinitionItem.DefaultDefinitionItem">
            <summary>
            Implementation of a <see cref="T:Microsoft.CodeAnalysis.FindUsages.DefinitionItem"/> that sits on top of a 
            <see cref="T:Microsoft.CodeAnalysis.DocumentSpan"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindUsages.DefinitionsAndReferences">
            <summary>
            A collection of <see cref="T:Microsoft.CodeAnalysis.FindUsages.DefinitionItem"/>s and <see cref="T:Microsoft.CodeAnalysis.FindUsages.SourceReferenceItem"/>s
            that can be presented in an editor and used to navigate to the defintions and
            references found for a symbol.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindUsages.DefinitionsAndReferences.Definitions">
            <summary>
            All the definitions to show.  Note: not all definitions may have references.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindUsages.DefinitionsAndReferences.References">
            <summary>
            All the references to show.  Note: every <see cref="P:Microsoft.CodeAnalysis.FindUsages.SourceReferenceItem.Definition"/> 
            should be in <see cref="P:Microsoft.CodeAnalysis.FindUsages.DefinitionsAndReferences.Definitions"/> 
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindUsages.SourceReferenceItem">
            <summary>
            Information about a symbol's reference that can be used for display and 
            navigation in an editor.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindUsages.SourceReferenceItem.Definition">
            <summary>
            The definition this reference corresponds to.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindUsages.SourceReferenceItem.SourceSpan">
            <summary>
            The location of the source item.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FindUsages.SourceReferenceItem.IsWrittenTo">
            <summary>
            If this reference is a location where the definition is written to.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.GenerateConstructorFromMembers.GenerateConstructorFromMembersCodeRefactoringProvider">
            <summary>
            This <see cref="T:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider"/> is responsible for allowing a user to pick a 
            set of members from a class or struct, and then generate a constructor for that takes in
            matching parameters and assigns them to those members.  The members can be picked using 
            a actual selection in the editor, or they can be picked using a picker control that will
            then display all the viable members and allow the user to pick which ones they want to
            use.
            
            Importantly, this type is not responsible for generating constructors when the user types
            something like "new MyType(x, y, z)", nor is it responsible for generating constructors
            in a derived type that delegate to a base type. Both of those are handled by other services.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GenerateConstructorFromMembers.GenerateConstructorFromMembersCodeRefactoringProvider.#ctor(Microsoft.CodeAnalysis.PickMembers.IPickMembersService)">
            <summary>
            For testing purposes only.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.GenerateEqualsAndGetHashCodeFromMembers.GenerateEqualsAndGetHashCodeFromMembersCodeRefactoringProvider.GenerateEqualsAndGetHashCodeAction.FormatLargeBinaryExpressionRule">
            <summary>
            Specialized formatter for the "return a == obj.a &amp;&amp; b == obj.b &amp;&amp; c == obj.c &amp;&amp; ...
            code that we spit out.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GenerateEqualsAndGetHashCodeFromMembers.GenerateEqualsAndGetHashCodeFromMembersCodeRefactoringProvider.GenerateEqualsAndGetHashCodeAction.FormatLargeBinaryExpressionRule.GetAdjustNewLinesOperation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.Options.OptionSet,Microsoft.CodeAnalysis.Formatting.Rules.NextOperation{Microsoft.CodeAnalysis.Formatting.Rules.AdjustNewLinesOperation})">
            <summary>
            Wrap the large &amp;&amp; expression after every &amp;&amp; token.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GenerateEqualsAndGetHashCodeFromMembers.GenerateEqualsAndGetHashCodeFromMembersCodeRefactoringProvider.GenerateEqualsAndGetHashCodeAction.FormatLargeBinaryExpressionRule.AddIndentBlockOperations(System.Collections.Generic.List{Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOperation},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Options.OptionSet,Microsoft.CodeAnalysis.Formatting.Rules.NextAction{Microsoft.CodeAnalysis.Formatting.Rules.IndentBlockOperation})">
            <summary>
            Align all the wrapped parts of the expression with the token after 'return'.
            That way we get:
            
            return a == obj.a &amp;&amp;
                   b == obj.b &amp;&amp;
                   ...
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.InitializeParameter.AbstractInitializeMemberFromParameterCodeRefactoringProvider`5.GetParameterWordParts(Microsoft.CodeAnalysis.IParameterSymbol)">
            <summary>
            Get the individual words in the parameter name.  This way we can generate 
            appropriate field/property names based on the user's preference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.InitializeParameter.AbstractAddParameterCheckCodeRefactoringProvider`5.TryFindParameterCheckStatement(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.IParameterSymbol,Microsoft.CodeAnalysis.Semantics.IBlockStatement,System.Threading.CancellationToken)">
            <summary>
            Tries to find an if-statement that looks like it is checking the provided parameter
            in some way.  If we find a match, we'll place our new null-check statement before/after
            this statement as appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GenerateFromMembers.AbstractGenerateFromMembersCodeRefactoringProvider.GetEnclosingNamedType(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the enclosing named type for the specified position.  We can't use
            <see cref="M:Microsoft.CodeAnalysis.SemanticModel.GetEnclosingSymbol(System.Int32,System.Threading.CancellationToken)"/> because that doesn't return
            the type you're current on if you're on the header of a class/interface.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.DocumentHighlighting.IDocumentHighlightsService">
            <summary>
            Note: This is the new version of the language service and superceded the same named type
            in the EditorFeatures layer.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddMissingReference.AbstractAddMissingReferenceCodeFixProvider.#ctor(Microsoft.CodeAnalysis.Packaging.IPackageInstallerService,Microsoft.CodeAnalysis.SymbolSearch.ISymbolSearchService)">
            <summary>
            Values for these parameters can be provided (during testing) for mocking purposes.
            </summary> 
        </member>
        <member name="P:Microsoft.CodeAnalysis.Navigation.INavigableItem.DisplayTaggedParts">
            <summary>
            The tagged parts to display for this item. If default, the line of text from <see cref="P:Microsoft.CodeAnalysis.Navigation.INavigableItem.Document"/> is used.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Navigation.INavigableItem.DisplayFileLocation">
            <summary>
            Return true to display the file path of <see cref="P:Microsoft.CodeAnalysis.Navigation.INavigableItem.Document"/> and the span of <see cref="P:Microsoft.CodeAnalysis.Navigation.INavigableItem.SourceSpan"/> when displaying this item.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Navigation.INavigableItem.IsImplicitlyDeclared">
            <summary>
            his is intended for symbols that are ordinary symbols in the language sense, and may be
            used by code, but that are simply declared implicitly rather than with explicit language
            syntax.  For example, a default synthesized constructor in C# when the class contains no
            explicit constructors.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Navigation.NavigableItemFactory.DeclaredSymbolNavigableItem.IsImplicitlyDeclared">
            <summary>
            DeclaredSymbolInfos always come from some actual declaration in source.  So they're
            never implicitly declared.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Navigation.NavigationOptions.PreferProvisionalTab">
            <summary>
            This option can be passed to the <see cref="T:Microsoft.CodeAnalysis.Navigation.IDocumentNavigationService"/> APIs to request that a provisional (or preview) tab 
            be used for any document that needs to be opened, if one is available.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.IDocumentNavigationService.CanNavigateToSpan(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Determines whether it is possible to navigate to the given position in the specified document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.IDocumentNavigationService.CanNavigateToLineAndOffset(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,System.Int32,System.Int32)">
            <summary>
            Determines whether it is possible to navigate to the given line/offset in the specified document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.IDocumentNavigationService.CanNavigateToPosition(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,System.Int32,System.Int32)">
            <summary>
            Determines whether it is possible to navigate to the given virtual position in the specified document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.IDocumentNavigationService.TryNavigateToSpan(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Navigates to the given position in the specified document, opening it if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.IDocumentNavigationService.TryNavigateToLineAndOffset(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,System.Int32,System.Int32,Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Navigates to the given line/offset in the specified document, opening it if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.IDocumentNavigationService.TryNavigateToPosition(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,System.Int32,System.Int32,Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Navigates to the given virtual position in the specified document, opening it if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.ISymbolNavigationService.TryNavigateToSymbol(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Navigate to the first source location of a given symbol.
            </summary>
            <param name="project">A project context with which to generate source for symbol
            if it has no source locations</param>
            <param name="symbol">The symbol to navigate to</param>
            <param name="options">A set of options. If these options are not supplied the
            current set of options from the project's workspace will be used.</param>
            <param name="cancellationToken">The token to check for cancellation</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.ISymbolNavigationService.TrySymbolNavigationNotify(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <returns>True if the navigation was handled, indicating that the caller should not 
            perform the navigation.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.ISymbolNavigationService.WouldNavigateToSymbol(Microsoft.CodeAnalysis.FindUsages.DefinitionItem,Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken,System.String@,System.Int32@,System.Int32@)">
            <returns>True if the navigation would be handled.</returns>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Features.RQName.Nodes.RQMethodPropertyOrEventName.OrdinaryNameValue">
            <summary>
            Methods, Properties, or Events either have "ordinary" names,
            or explicit interface names. But even explicit names have an
            underlying ordinary name as well. This is just the value for
            ordinary names, or the underlying ordinary name if this is an
            explicit name.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Features.RQName.RQNameInternal">
            <summary>
            Helpers related to <see cref="N:Microsoft.CodeAnalysis.Features.RQName"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Features.RQName.RQNameInternal.From(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns an RQName for the given symbol, or <code>null</code>if the symbol cannot be represented by an RQName.
            </summary>
            <param name="symbol">The symbol to build an RQName for.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Features.RQName.RQNodeBuilder.Build(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Builds the RQName for a given symbol.
            </summary>
            <returns>The node if it could be created, otherwise null</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Structure.AbstractBlockStructureProvider">
            <summary>
            Note: this type is for subclassing by the VB and C# provider only.
            It presumes that the language supports Syntax Trees.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Structure.AbstractBlockStructureProvider.ProvideBlockStructure(Microsoft.CodeAnalysis.Structure.BlockStructureContext)">
            <summary>
            Keep in sync with <see cref="M:Microsoft.CodeAnalysis.Structure.AbstractBlockStructureProvider.ProvideBlockStructureAsync(Microsoft.CodeAnalysis.Structure.BlockStructureContext)"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Structure.AbstractBlockStructureProvider.ProvideBlockStructureAsync(Microsoft.CodeAnalysis.Structure.BlockStructureContext)">
            <summary>
            Keep in sync with <see cref="M:Microsoft.CodeAnalysis.Structure.AbstractBlockStructureProvider.ProvideBlockStructure(Microsoft.CodeAnalysis.Structure.BlockStructureContext)"/>
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Structure.BlockSpan.IsCollapsible">
            <summary>
            Whether or not this span can be collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Structure.BlockSpan.TextSpan">
            <summary>
            The span of text to collapse.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Structure.BlockSpan.HintSpan">
            <summary>
            The span of text to display in the hint on mouse hover.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Structure.BlockSpan.BannerText">
            <summary>
            The text to display inside the collapsed region.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Structure.BlockSpan.AutoCollapse">
            <summary>
            Whether or not this region should be automatically collapsed when the 'Collapse to Definitions' command is invoked.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Structure.BlockSpan.IsDefaultCollapsed">
            <summary>
            Whether this region should be collapsed by default when a file is opened the first time.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Structure.BlockStructureService.GetService(Microsoft.CodeAnalysis.Document)">
            <summary>
            Gets the service corresponding to the specified document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Structure.BlockStructureService.Language">
            <summary>
            The language from <see cref="T:Microsoft.CodeAnalysis.LanguageNames"/> this service corresponds to.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Structure.BlockStructureService.GetBlockStructure(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Structure.BlockStructure"/> for the provided document. Note that the
            default implementation works by calling into <see cref="M:Microsoft.CodeAnalysis.Structure.BlockStructureService.GetBlockStructureAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)"/>
            and blocking on the async operation. Subclasses should provide more efficient
            implementations that do not block on async operations if possible.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Structure.BlockStructureServiceWithProviders.GetBuiltInProviders">
            <summary>
            Returns the providers always available to the service.
            This does not included providers imported via MEF composition.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolMapping.ISymbolMappingService.MapSymbolAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SymbolKey,System.Threading.CancellationToken)">
            <summary>
            Given a <cref see="SymbolId"/> and the document whence the corresponding <cref see="ISymbol"/>
            came, locate an identical symbol in the correct solution for performing common symbol operations
            (e.g. find references) as defined by this service.
            </summary>
            <param name="document">The document whence the symbol came</param>
            <param name="symbolId">The id of the symbol to map</param>
            <param name="cancellationToken">To cancel symbol resolution</param>
            <returns>The matching symbol from the correct solution or null</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SymbolMapping.ISymbolMappingService.MapSymbolAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Given an <cref see="ISymbol"/> and the document whence the corresponding <cref see="ISymbol"/>
            came, locate an identical symbol in the correct solution for performing common symbol operations
            (e.g. find references) as defined by this service.
            </summary>
            <param name="document">The document whence the symbol came</param>
            <param name="symbol">The symbol to map</param>
            <param name="cancellationToken">To cancel symbol resolution</param>
            <returns>The matching symbol from the correct solution or null</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.TodoComments.IRemoteTodoCommentService">
            <summary>
            interface exist to strongly type todo comment remote service
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.TodoComments.TodoCommentDescriptor">
            <summary>
            Description of a TODO comment type to find in a user's comments.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.TodoComments.TodoComment">
            <summary>
            A TODO comment that has been found within the user's code.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.UseCoalesceExpression.AbstractUseCoalesceExpressionDiagnosticAnalyzer`4">
            <summary>
            Looks for code of the form "x == null ? y : x" and offers to convert it to "x ?? y";
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.UseThrowExpression.AbstractUseThrowExpressionDiagnosticAnalyzer">
            <summary>
            Looks for patterns of the form:
            <code>
            if (a == null) {
              throw SomeException();
            }
            
            x = a;
            </code>
            
            and offers to change it to
            
            <code>
            x = a ?? throw SomeException();
            </code>
            
            Note: this analyzer can be updated to run on VB once VB supports 'throw' 
            expressions as well.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeLens.CodeLensFindReferencesProgress">
            <summary>
            Tracks incremental progress of a find references search, we use this to
            count the number of references up until a certain cap is reached and cancel the search
            or until the search completes, if such a cap is not reached.
            </summary>
            <remarks>
            All public methods of this type could be called from multiple threads.
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeLens.CodeLensFindReferencesProgress.SearchCap">
            <remarks>
            If the cap is 0, then there is no cap.
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeLens.CodeLensFindReferencesProgress.CancellationToken">
            <summary>
            The cancellation token that aggregates the original cancellation token + this progress
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeLens.CodeLensFindReferencesProgress.FilterReference(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation)">
            <summary>
            Exclude the following kind of symbols:
             1. Implicitly declared symbols (such as implicit fields backing properties)
             2. Symbols that can't be referenced by name (such as property getters and setters).
             3. Metadata only symbols, i.e. symbols with no location in source.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeLens.ICodeLensReferencesService.GetReferenceCountAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Given a document and syntax node, returns the number of locations where the located node is referenced.
            <para>
                Optionally, the service supports capping the reference count to a value specified by <paramref name="maxSearchResults"/>
                if <paramref name="maxSearchResults"/> is greater than 0.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeLens.ICodeLensReferencesService.FindReferenceLocationsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Given a document and syntax node, returns a collection of locations where the located node is referenced.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeLens.ICodeLensReferencesService.FindReferenceMethodsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Given a document and syntax node, returns a collection of locations of methods that refer to the located node.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeLens.ICodeLensReferencesService.GetFullyQualifiedName(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Given a document and syntax node, returns the fully qualified name of the located node's declaration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeLens.ICodeLensDisplayInfoService.GetDisplayNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the node used for display info
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeLens.ICodeLensDisplayInfoService.GetDisplayName(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the DisplayName for the given node
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeLens.ReferenceCount">
            <summary>
            Represents the result of a FindReferences Count operation.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeLens.ReferenceCount.Count">
            <summary>
            Represents the number of references to a given symbol.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeLens.ReferenceCount.IsCapped">
            <summary>
            Represents if the count is capped by a certain maximum.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeLens.ReferenceLocationDescriptor">
            <summary>
            Holds information required to display and navigate to individual references
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeLens.ReferenceLocationDescriptor.Language">
            <summary>
            Language of the reference location
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeLens.ReferenceLocationDescriptor.LongDescription">
            <summary>
            Fully qualified name of the symbol containing the reference location
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeLens.ReferenceLocationDescriptor.Glyph">
            <summary>
            The kind of symbol containing the reference location (such as type, method, property, etc.)
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeLens.ReferenceLocationDescriptor.ReferenceLineText">
            <summary>
            the full line of source that contained the reference
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeLens.ReferenceLocationDescriptor.ReferenceStart">
            <summary>
            the beginning of the span within reference text that was the use of the reference
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeLens.ReferenceLocationDescriptor.ReferenceLength">
            <summary>
            the length of the span of the reference
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeLens.ReferenceLocationDescriptor.BeforeReferenceText1">
            <summary>
            Text above the line with the reference
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeLens.ReferenceLocationDescriptor.BeforeReferenceText2">
            <summary>
            Text above the line with the reference
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeLens.ReferenceLocationDescriptor.AfterReferenceText1">
            <summary>
            Text below the line with the reference
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeLens.ReferenceLocationDescriptor.AfterReferenceText2">
            <summary>
            Text below the line with the reference
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeLens.ReferenceMethodDescriptor">
            <summary>
            A caller method of a callee
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeLens.ReferenceMethodDescriptor.#ctor(System.String,System.String)">
            <summary>
            Describe a caller method of a callee
            </summary>
            <param name="fullName">Method's fully qualified name</param>
            <param name="filePath">Method full path</param>
            <remarks>
             Method full name is expected to be in the .NET full name type convention. That is,
             namespace/type is delimited by '.' and nested type is delimited by '+'
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeLens.ReferenceMethodDescriptor.FullName">
            <summary>
             Returns method's fully quilified name without parameters
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeLens.ReferenceMethodDescriptor.FilePath">
            <summary>
            Returns method's file path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ChangeSignature.AbstractChangeSignatureService.GetInvocationSymbolAsync(Microsoft.CodeAnalysis.Document,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Determines the symbol on which we are invoking ReorderParameters
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ChangeSignature.AbstractChangeSignatureService.FindNodeToUpdate(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Given a SyntaxNode for which we want to reorder parameters/arguments, find the 
            SyntaxNode of a kind where we know how to reorder parameters/arguments.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ChangeSignature.DelegateInvokeMethodReferenceFinder">
            <summary>
            For ChangeSignature, FAR on a delegate invoke method must cascade to BeginInvoke, 
            cascade through method group conversions, and discover implicit invocations that do not
            mention the string "Invoke" or the delegate type itself. This implementation finds these
            symbols by binding most identifiers and invocation expressions in the solution. 
            </summary>
            <remarks>
            TODO: Rewrite this to track backward through references instead of binding everything
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.QualifyMemberAccess.AbstractQualifyMemberAccessDiagnosticAnalyzer`1.CanMemberAccessBeQualified(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Reports on whether the specified member is suitable for qualification. Some member
            access expressions cannot be qualified; for instance if they begin with <c>base.</c>,
            <c>MyBase.</c>, or <c>MyClass.</c>.
            </summary>
            <returns>True if the member access can be qualified; otherwise, False.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.GenerateDefaultConstructors.GenerateDefaultConstructorsCodeRefactoringProvider">
            <summary>
            This <see cref="T:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider"/> gives users a way to generate constructors for
            a derived type that delegate to a base type.  For all accessibly constructors in the base
            type, the user will be offered to create a constructor in the derived type with the same
            signature if they don't already have one.  This way, a user can override a type and easily
            create all the forwarding constructors.
            
            Importantly, this type is not responsible for generating constructors when the user types
            something like "new MyType(x, y, z)", nor is it responsible for generating constructors
            for a type based on the fields/properties of that type. Both of those are handled by other 
            services.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.TaggedText">
            <summary>
            A piece of text with a descriptive tag.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.TaggedText.Tag">
            <summary>
            A descriptive tag from <see cref="T:Microsoft.CodeAnalysis.TextTags"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.TaggedText.Text">
            <summary>
            The actual text to be displayed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.TaggedText.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.CodeAnalysis.TaggedText"/>
            </summary>
            <param name="tag">A descriptive tag from <see cref="T:Microsoft.CodeAnalysis.TextTags"/>.</param>
            <param name="text">The actual text to be displayed.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.TextTags">
            <summary>
            The set of well known text tags used for the <see cref="P:Microsoft.CodeAnalysis.TaggedText.Tag"/> property.
            These tags influence the presentation of text.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.DocumentSpan">
            <summary>
            Represents a <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/> location in a <see cref="P:Microsoft.CodeAnalysis.DocumentSpan.Document"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DocumentSpan.Properties">
            <summary>
            Additional information attached to a document span by it creator.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerProgressReporter">
            <summary>
            Provide a way to see whether solution crawler is started or not
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerProgressReporter.InProgress">
            <summary>
            Return true if solution crawler is in progress.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerProgressReporter.Started">
            <summary>
            Raised when there is pending work in solution crawler.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerProgressReporter.Stopped">
            <summary>
            Raised when there is no more pending work in solution crawler.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerService">
            <summary>
            Provide a way to control solution crawler.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerService.Reanalyze(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectId},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},System.Boolean)">
            <summary>
            Ask solution crawler to re-analyze given <see cref="T:Microsoft.CodeAnalysis.ProjectId"/>s or/and <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s 
            in given <see cref="T:Microsoft.CodeAnalysis.Workspace"/> with given <see cref="T:Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerService.GetProgressReporter(Microsoft.CodeAnalysis.Workspace)">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerProgressReporter"/> for the given <see cref="T:Microsoft.CodeAnalysis.Workspace"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.IWorkCoordinatorPriorityService.IsLowPriorityAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            True if this document is less important than other documents in the project it is 
            contained in, and should have work scheduled for it happen after all other documents
            in the project.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.SolutionCrawlerProgressReporter">
            <summary>
            Progress reporter
            
            initial implementation doesn't care about each specific item's progress. 
            but as a whole whether there is anything going on. later if there is any need to track each item's progress specifically such as
            higher/normal/lower queue, then we can change this to track those separately.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.NullReporter">
            <summary>
            reporter that doesn't do anything
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.SolutionCrawlerService">
            <summary>
            nested class of <see cref="T:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService"/> since it is tightly coupled with it.
            
            <see cref="T:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerService"/> is implemented by this class since WorkspaceService doesn't allow a class to implement
            more than one <see cref="T:Microsoft.CodeAnalysis.Host.IWorkspaceService"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Common.UpdatedEventArgs.Id">
            <summary>
            The identity of update group. 
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Common.UpdatedEventArgs.Workspace">
            <summary>
            Workspace this update is associated with
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Common.UpdatedEventArgs.ProjectId">
            <summary>
            projectId this update is associated with
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Common.UpdatedEventArgs.DocumentId">
            <summary>
            documentId this update is associated with
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditAndContinue.TraceLog">
            <summary>
            Fixed size rolling tracing log. 
            </summary>
            <remarks>
            Recent entries are captured in a memory dump.
            If DEBUG is defined, all entries written to <see cref="M:Microsoft.CodeAnalysis.EditAndContinue.TraceLog.DebugWrite(System.String)"/> or
            <see cref="M:Microsoft.CodeAnalysis.EditAndContinue.TraceLog.DebugWrite(System.String,Microsoft.CodeAnalysis.EditAndContinue.TraceLog.Arg[])"/> are print to <see cref="T:System.Diagnostics.Debug"/> output.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.FindMemberDeclaration(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Finds a member declaration node containing given active statement node.
            </summary>
            <remarks>
            The implementation has to decide what kinds of nodes in top-level match relationship represent a declaration.
            Every member declaration must be represented by exactly one node, but not all nodes have to represent a declaration.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetDeclarationBody(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)">
            <summary>
            If the specified node represents a member declaration returns a node that represents its body,
            i.e. a node used as the root of statement-level match.
            </summary>
            <param name="node">A node representing a declaration or a top-level edit node.</param>
            <param name="isMember">
            True if <paramref name="isMember"/> represents a member declaration,
            false if it represents an edit node.</param>
            <returns>
            Returns null for nodes that don't represent declarations.
            </returns>
            <remarks>
            The implementation has to decide what kinds of nodes in top-level match relationship represent a declaration.
            Every member declaration must be represented by exactly one node, but not all nodes have to represent a declaration.
            
            If a member doesn't have a body (null is returned) it can't have associated active statements.
            
            Body does not need to cover all active statements that may be associated with the member. 
            E.g. Body of a C# constructor is the method body block. Active statements may be placed on the base constructor call.
                 Body if a VB field declaration with shared AsNew initializer is the New expression. Active statements might be placed on the field variables.
            <see cref="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.FindStatementAndPartner(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode@,System.Int32@)"/> has to account for such cases.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetDeclarationBodyEdit(Microsoft.CodeAnalysis.Differencing.Edit{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Differencing.EditKind},Microsoft.CodeAnalysis.SyntaxNode@,Microsoft.CodeAnalysis.SyntaxNode@)">
            <summary>
            Interprets an edit as a declaration body edit.
            </summary>
            <param name="edit">A top-level edit.</param>
            <param name="editMap">All top-level edits by syntax node.</param>
            <param name="oldBody">The old body participating in the edit.</param>
            <param name="newBody">The new body participating in the edit.</param>
            <returns>
            True if the specified edit is a declaration body edit, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetActiveTokens(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            If the specified node represents a member declaration returns all tokens of the member declaration
            that might be covered by an active statement.
            </summary>
            <returns>
            Tokens covering all possible breakpoint spans associated with the member, 
            or null if the specified node doesn't represent a member declaration or 
            doesn't have a body that can contain active statements.
            </returns>
            <remarks>
            The implementation has to decide what kinds of nodes in top-level match relationship represent a declaration.
            Every member declaration must be represented by exactly one node, but not all nodes have to represent a declaration.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetEncompassingAncestor(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns an ancestor that encompasses all active and statement level 
            nodes that belong to the member represented by <paramref name="bodyOrMatchRootOpt"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.FindStatementAndPartner(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode@,System.Int32@)">
            <summary>
            Finds a statement at given position and a declaration body.
            Also returns the corresponding partner statement in <paramref name="partnerDeclarationBodyOpt"/>, if specified.
            </summary>
            <remarks>
            The declaration body node may not contain the <paramref name="position"/>. 
            This happens when an active statement associated with the member is outside of its body (e.g. C# constructor).
            If the position doesn't correspond to any statement uses the start of the <paramref name="declarationBody"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.FindPartner(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Maps <paramref name="leftNode"/> descendant of <paramref name="leftRoot"/> to corresponding descendant node
            of <paramref name="rightRoot"/>, assuming that the trees only differ in trivia
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.FindEnclosingLambdaBody(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns a node that represents a body of a lambda containing specified <paramref name="node"/>,
            or null if the node isn't contained in a lambda. If a node is returned it must uniquely represent the lambda,
            i.e. be no two distinct nodes may represent the same lambda.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetLambdaBodyExpressionsAndStatements(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Given a node that represents a lambda body returns all nodes of the body in a syntax list.
            </summary>
            <remarks>
            Note that VB lambda bodies are represented by a lambda header and that some lambda bodies share 
            their parent nodes with other bodies (e.g. join clause expressions).
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryMatchActiveStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode@)">
            <summary>
            Matches old active statement to new active statement without constructing full method body match.
            This is needed for active statements that are outside of method body, like constructor initializer.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetActiveSpan(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.Text.TextSpan@)">
            <summary>
            Get the active span that corresponds to specified node (or its part).
            </summary>
            <returns>
            True if the node has an active span associated with it, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.EnumerateNearStatements(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Yields potential active statements around the specified active statement
            starting with siblings following the statement, then preceding the statement, follows with its parent, its following siblings, etc.
            </summary>
            <returns>
            Pairs of (node, statement part), or (node, -1) indicating there is no logical following statement.
            The enumeration continues until the root is reached.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Determines if two syntax nodes are the same, disregarding trivia differences.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.AreEquivalentActiveStatements(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Int32)">
            <summary>
            Returns true if the code emitted for the old active statement part (<paramref name="statementPart"/> of <paramref name="oldStatement"/>) 
            is the same as the code emitted for the corresponding new active statement part (<paramref name="statementPart"/> of <paramref name="newStatement"/>). 
            </summary>
            <remarks>
            A rude edit is reported if an active statement is changed and this method returns true.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetCapturedVariables(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Analyzes data flow in the member body represented by the specified node and returns all captured variables and parameters (including "this").
            If the body is a field/property initializer analyzes the initializer expression only.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetVariableUseSites(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken)">
            <summary>
            Enumerates all use sites of a specified variable within the specified syntax subtrees.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.HasParameterClosureScope(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns true if the parameters of the symbol are lifted into a scope that is different from the symbol's body.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetLambdaBodies(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode@,Microsoft.CodeAnalysis.SyntaxNode@)">
            <summary>
            Returns all lambda bodies of a node representing a lambda, 
            or false if the node doesn't represent a lambda.
            </summary>
            <remarks>
            C# anonymous function expression and VB lambda expression both have a single body
            (in VB the body is the header of the lambda expression).
            
            Some lambda queries (group by, join by) have two bodies.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.IsDeclarationWithInitializer(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Return true if the declaration is a field/property declaration with an initializer. 
            Shall return false for enum members.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.IsConstructorWithMemberInitializers(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Return true if the declaration is a constructor declaration to which field/property initializers are emitted. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.ComputeMap(Microsoft.CodeAnalysis.Differencing.Match{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.ActiveNode[],System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.LambdaInfo}@,System.Collections.Generic.List{Microsoft.CodeAnalysis.EditAndContinue.RudeEditDiagnostic})">
            <summary>
            Calculates a syntax map of the entire method body including all lambda bodies it contains (recursively).
            Internal for testing.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetMatchingAncestor(System.Collections.Generic.IReadOnlyDictionary{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode@)">
            <summary>
            Finds the inner-most ancestor of the specified node that has a matching node in the new tree.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementFlags.LeafFrame">
            <summary>
            The statement is in a leaf frame.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementFlags.PartiallyExecuted">
            <summary>
            The statement is partially executed.
            </summary>
            <remarks>
            An active statement is partially executed if the thread is stopped in between two sequence points.
            This may happen when the users steps through the code in disassembly window (stepping over machine instructions),
            when the compiler emits a call to Debugger.Break (VB Stop statement), etc.
            
            Partially executed active statement can't be edited.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementFlags.NonUserCode">
            <summary>
            The statement IL is not in user code.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditAndContinue.DebuggingSession">
            <summary>
            Represents a debugging session.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.ActiveStatements">
            <summary>
            Spans of active statements in the document, or null if the document has syntax errors.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.RudeEditErrors">
            <summary>
            Diagnostics for rude edits in the document, or null if the document is unchanged or has syntax errors.
            If the compilation has semantic errors only syntactic rude edits are calculated.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.SemanticEdits">
            <summary>
            Edits made in the document, or null if the document is unchanged, has syntax errors, has rude edits,
            or if the compilation has semantic errors.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.ExceptionRegions">
             <summary>
             Exception regions -- spans of catch and finally handlers that surround the active statements.
             
             Null if the document has syntax errors or rude edits, or if the compilation has semantic errors.
             </summary>
             <remarks>
             Null if there are any rude edit diagnostics.
             
             Otherwise, each active statement in <see cref="F:Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.ActiveStatements"/> has a corresponding slot in <see cref="F:Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.ExceptionRegions"/>.
            
             Exception regions for each EH block/clause are marked as |...|.
               try { ... AS ... } |catch { } finally { }|
               try { } |catch { ... AS ... }| finally { }
               try { } catch { } |finally { ... AS ... }|
             
             Contains a minimal set of spans that cover the handlers.
             For example:
               try { } |finally { try { ... AS ... } catch {  } }|
               try { } |finally { try { } catch { ... AS ... } }|
             </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.LineEdits">
            <summary>
            Line edits in the document, or null if the document has syntax errors or rude edits, 
            or if the compilation has semantic errors.
            </summary>
            <remarks>
            Sorted by <see cref="F:Microsoft.CodeAnalysis.EditAndContinue.LineChange.OldLine"/>
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults._hasCompilationErrors">
            <summary>
            The compilation has compilation errors (syntactic or semantic), 
            or null if the document doesn't have any modifications and
            presence of compilation errors was not determined.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.EditSession._stoppedAtException">
            <summary>
            Stopped at exception, an unwind is required before EnC is allowed. All edits are rude.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.EditAndContinue.IActiveStatementTrackingService.TrackingSpansChanged">
            <summary>
            Triggered when tracking spans have changed.
            </summary>
            <remarks>
            The argument is true if the leaf active statement may have changed. 
            It might be true even if it didn't, but it's not false if it does.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.IActiveStatementTrackingService.UpdateActiveStatementSpans(Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementId,Microsoft.CodeAnalysis.Text.TextSpan}})">
            <summary>
            Replaces the existing tracking spans with specified active statement spans.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ProjectAnalysisSummary.NoChanges">
            <summary>
            Project hasn't been changed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ProjectAnalysisSummary.CompilationErrors">
            <summary>
            Project contains syntactic and/or semantic errors.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ProjectAnalysisSummary.RudeEdits">
            <summary>
            Project contains rude edits.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ProjectAnalysisSummary.ValidInsignificantChanges">
            <summary>
            The project only changed in comments, whitespaces, etc. that don't require compilation.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ProjectAnalysisSummary.ValidChanges">
            <summary>
            The project contains valid changes that require application of a delta.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ProjectReadOnlyReason.None">
            <summary>
            Project module was successfully loaded into the debuggee process when edit session started and is editable.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ProjectReadOnlyReason.MetadataNotAvailable">
            <summary>
            Project hasn't been built at the time debugging session started (or the binary is unreadable).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ProjectReadOnlyReason.NotLoaded">
            <summary>
            One of the following reasons
            - Module wasn't loaded into the debuggee process when edit session started.
            - The debugger has been attached to an already running process.
            - The code being debugged was optimized at build or runtime.
            - The assembly being debugged is loaded as domain-neutral.
            - The assembly being debugged is runtime-generated (Reflection.Emit).
            - IntelliTrace is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.SessionReadOnlyReason.None">
            <summary>
            The project is editable.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.SessionReadOnlyReason.Running">
            <summary>
            The program is running. No edits allowed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.SessionReadOnlyReason.StoppedAtException">
            <summary>
            The program is stopped at exception. No edits allowed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExtractMethod.OperationStatusFlag">
            <summary>
            status code for extract method operations
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ExtractMethod.OperationStatusFlag.Succeeded">
            <summary>
            operation has succeeded
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ExtractMethod.OperationStatusFlag.Suggestion">
            <summary>
            operation has succeeded with a span that is different than original span
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ExtractMethod.OperationStatusFlag.BestEffort">
            <summary>
            operation has failed but can provide some best effort result
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.Extensions.GetTokenWithAnnotation(Microsoft.CodeAnalysis.SemanticDocument,Microsoft.CodeAnalysis.SyntaxAnnotation)">
            <summary>
            get tokens with given annotation in current document
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.Extensions.ResolveType``1(Microsoft.CodeAnalysis.SemanticModel,``0)">
            <summary>
            resolve the given symbol against compilation this snapshot has
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.Extensions.HasDiagnostics(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            check whether node contains error for itself but not from its child node
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodResult.Succeeded">
            <summary>
            True if the extract method operation succeeded.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodResult.SucceededWithSuggestion">
            <summary>
            True if the extract method operation is possible if the original span is adjusted.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodResult.Document">
            <summary>
            The transformed document that was produced as a result of the extract method operation.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodResult.Reasons">
            <summary>
            The reasons why the extract method operation did not succeed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodResult.MethodDeclarationNode">
            <summary>
            the generated method node that contains the extracted code.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodResult.InvocationNameToken">
            <summary>
            The name token for the invocation node that replaces the extracted code.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodResult.Status">
            <summary>
            internal status of result. more fine grained reason why it is failed. 
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExtractMethod.ITriviaSavedResult">
            <summary>
            contains information to restore trivia later on to the annotated tree
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.ITriviaSavedResult.Root">
            <summary>
            root node of the annotated tree.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.ITriviaSavedResult.RestoreTrivia(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ExtractMethod.AnnotationResolver,Microsoft.CodeAnalysis.ExtractMethod.TriviaResolver)">
            <summary>
            restore saved trivia to given tree
            </summary>
            <param name="root">root node to the annotated tree</param>
            <param name="annotationResolver">it provides a custom way of resolving annotations to retrieve right tokens to attach trivia</param>
            <param name="triviaResolver">it provides a custom way of creating trivia list between two tokens</param>
            <returns>root node to a trivia restored tree</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExtractMethod.ISyntaxTriviaService">
            <summary>
            syntax trivia related services
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.ISyntaxTriviaService.SaveTriviaAroundSelection(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            save trivia around span and let user restore trivia later
            </summary>
            <param name="root">root node of a tree</param>
            <param name="textSpan">selection whose trivia around its edges will be saved</param>
            <returns>object that holds onto enough information to restore trivia later</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetFlowAnalysisNodeRange">
            <summary>
            convert text span to node range for the flow analysis API
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.ContainsReturnStatementInSelectedCode(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            check whether selection contains return statement or not
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.CreateFromSymbol(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.ExtractMethod.VariableStyle,System.Boolean)">
            <summary>
            create VariableInfo type
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetIndexOfVariableInfoToUseAsReturnValue(System.Collections.Generic.IList{Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.VariableInfo})">
            <summary>
            among variables that will be used as parameters at the extracted method, check whether one of the parameter can be used as return
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetRangeVariableType(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.IRangeVariableSymbol)">
            <summary>
            get type of the range variable symbol
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.ReadOnlyFieldAllowed">
            <summary>
            check whether the selection is at the placed where read-only field is allowed to be extracted out
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.AnalyzerResult.UseInstanceMember">
            <summary>
            used to determine whether static can be used
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.AnalyzerResult.EndOfSelectionReachable">
            <summary>
            used to determine whether "return" statement needs to be inserted
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.AnalyzerResult.SemanticDocument">
            <summary>
            document this result is based on
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.AnalyzerResult.AwaitTaskReturn">
            <summary>
            flag to show whether task return type is due to await
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.AnalyzerResult.ReturnType">
            <summary>
            return type
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.AnalyzerResult.Status">
            <summary>
            analyzer result operation status
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.VariableSymbol">
            <summary>
            temporary symbol until we have a symbol that can hold onto both local and parameter symbol
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.VariableSymbol.OriginalTypeHadAnonymousTypeOrDelegate">
            <summary>
            return true if original type had anonymous type or delegate somewhere in the type
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.VariableSymbol.OriginalType">
            <summary>
            get the original type with anonymous type removed
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.OperationStatus.Create``1(Microsoft.CodeAnalysis.ExtractMethod.OperationStatus,``0)">
            <summary>
            create operation status with the given data
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExtractMethod.OperationStatus`1">
            <summary>
            operation status paired with data
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExtractMethod.SelectionResult">
            <summary>
            clean up this code when we do selection validator work.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ImplementInterface.AbstractImplementInterfaceService.ImplementInterfaceCodeAction.AttributesToRemove(Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Lists compiler attributes that we want to remove.
            The TupleElementNames attribute is compiler generated (it is used for naming tuple element names).
            We never want to place it in source code.
            Same thing for the Dynamic attribute.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Options.ServiceFeatureOnOffOptions.ClosedFileDiagnostic">
            <summary>
            this option is solely for performance. don't confused by option name. 
            this option doesn't mean we will show all diagnostics that belong to opened files when turned off,
            rather it means we will only show diagnostics that are cheap to calculate for small scope such as opened files.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Options.ServiceComponentOnOffOptions">
            <summary>
            options to indicate whether a certain component in Roslyn is enabled or not
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Utilities.LinkedFilesSymbolEquivalenceComparer">
            <summary>
            For completion and quickinfo in linked files, we compare symbols from different documents
            to determine if they are similar enough for us to suppress the platform dependence
            warning icon. We consider symbols equivalent if they have the same name and kind.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListener.DiagnosticAsyncToken">
            <summary>
            Stores the source information for an <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.IAsyncToken"/> value.  Helpful when 
            tracking down tokens which aren't properly disposed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.TestHooks.FeatureMetadata">
            <summary>
            This interface declares a contract for MEF to import metadata in a strongly-typed fashion.
            The name of the interface is unimportant, only the property names and types are important.
            This interface matches the Roslyn.Services.Threading.FeatureAttribute's public properties.
            Whatever you specify in a feature like this [Feature("Outlining")] will become available in
            this interface's properties (FeatureName will be set to "Outlining")
            </summary>
            <remarks>A good link is: http://mef.codeplex.com/wikipage?title=Exports%20and%20Metadata
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationWaiter.WaitAllAsync(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationWaiter})">
            <summary>
            Wait for all of the <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationWaiter"/> instances to finish their
            work.
            </summary>
            <remarks>
            This is a very handy method for debugging hangs in the unit test.  Set a break point in the 
            loop, dig into the waiters and see all of the active <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.IAsyncToken"/> values 
            representing the remaining work.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.IncrementalCaches.SymbolTreeInfoIncrementalAnalyzerProvider">
            <summary>
            Features like add-using want to be able to quickly search symbol indices for projects and
            metadata.  However, creating those indices can be expensive.  As such, we don't want to
            construct them during the add-using process itself.  Instead, we expose this type as an 
            Incremental-Analyzer to walk our projects/metadata in the background to keep the indices
            up to date.
            
            We also then export this type as a service that can give back the index for a project or
            metadata dll on request.  If the index has been produced then it will be returned and 
            can be used by add-using.  Otherwise, nothing is returned and no results will be found.
            
            This means that as the project is being indexed, partial results may be returned.  However
            once it is fully indexed, then total results will be returned.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.IncrementalCaches.SymbolTreeInfoIncrementalAnalyzerProvider.MetadataInfo.SymbolTreeInfo">
            <summary>
            Can't be null.  Even if we weren't able to read in metadata, we'll still create an empty
            index.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.IncrementalCaches.SymbolTreeInfoIncrementalAnalyzerProvider.MetadataInfo.ReferencingProjects">
            <summary>
            Note: the Incremental-Analyzer infrastructure guarantees that it will call all the methods
            on <see cref="T:Microsoft.CodeAnalysis.IncrementalCaches.SymbolTreeInfoIncrementalAnalyzerProvider.IncrementalAnalyzer"/> in a serial fashion.  As that is the only type that
            reads/writes these <see cref="T:Microsoft.CodeAnalysis.IncrementalCaches.SymbolTreeInfoIncrementalAnalyzerProvider.MetadataInfo"/> objects, we don't need to lock this.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.MetadataAsSource.AbstractMetadataAsSourceService.GetFormattingRules(Microsoft.CodeAnalysis.Document)">
            <summary>
            provide formatting rules to be used when formatting MAS file
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.MetadataAsSource.AbstractMetadataAsSourceService.AddAssemblyInfoRegionAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Prepends a region directive at the top of the document with a name containing
            information about the assembly and a comment inside containing the path to the
            referenced assembly.  The containing assembly may not have a path on disk, in which case
            a string similar to "location unknown" will be placed in the comment inside the region
            instead of the path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.MetadataAsSource.IMetadataAsSourceService.AddSourceToAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Generates formatted source code containing general information about the symbol's
            containing assembly, and the public, protected, and protected-or-internal interface of
            which the given ISymbol is or is a part of into the given document
            </summary>
            <param name="document">The document to generate source into</param>
            <param name="symbol">The symbol whose interface to generate source for</param>
            <param name="cancellationToken">To cancel document operations</param>
            <returns>The updated document</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.MetadataAsSource.MetadataAsSourceHelpers">
            <summary>
            Helpers shared by both the text service and the editor service
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Notification.INotificationService.SendNotification(System.String,System.String,Microsoft.CodeAnalysis.Notification.NotificationSeverity)">
            <summary>
            Displays a message box with an OK button to the user.
            </summary>
            <param name="message">The message shown within the message box.</param>
            <param name="title">The title bar to be shown in the message box. May be ignored by some implementations.</param>
            <param name="severity">The severity of the message.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Notification.INotificationService.ConfirmMessageBox(System.String,System.String,Microsoft.CodeAnalysis.Notification.NotificationSeverity)">
            <summary>
            Displays a message box with a yes/no question to the user.
            </summary>
            <param name="message">The message shown within the message box.</param>
            <param name="title">The title bar to be shown in the message box. May be ignored by some implementations.</param>
            <param name="severity">The severity of the message.</param>
            <returns>true if yes was clicked, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Organizing.IOrganizingService">
            <summary>
            internal interface used to use language specific service from common service layer
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Organizing.IOrganizingService.GetDefaultOrganizers">
            <summary>
            return default organizers
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Organizing.IOrganizingService.OrganizeAsync(Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Organizing.Organizers.ISyntaxOrganizer},System.Threading.CancellationToken)">
            <summary>
            Organize document
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Organizing.Organizers.ISyntaxOrganizer.SyntaxNodeTypes">
            <summary>
            syntax node types this organizer is applicable to
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Organizing.Organizers.ISyntaxOrganizer.OrganizeNode(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            organize given node
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Organizing.OrganizingService.OrganizeAsync(Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Organizing.Organizers.ISyntaxOrganizer},System.Threading.CancellationToken)">
            <summary>
            Organize the whole document.
            
            Optionally you can provide your own organizers. otherwise, default will be used.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ProjectManagement.IProjectManagementService">
            <summary>
            This service provides a way to extract all the folders under a given project, or find the default namespace if it exists.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SignatureHelp.ISignatureHelpProvider.IsTriggerCharacter(System.Char)">
            <summary>
            Returns true if the character might trigger completion, 
            e.g. '(' and ',' for method invocations 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SignatureHelp.ISignatureHelpProvider.IsRetriggerCharacter(System.Char)">
            <summary>
            Returns true if the character might end a Signature Help session, 
            e.g. ')' for method invocations.  
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SignatureHelp.ISignatureHelpProvider.GetItemsAsync(Microsoft.CodeAnalysis.Document,System.Int32,Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo,System.Threading.CancellationToken)">
            <summary>
            Returns valid signature help items at the specified position in the document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpItem.IsVariadic">
            <summary>
            True if this signature help item can have an unbounded number of arguments passed to it.
            If it is variadic then the last parameter will be considered selected, even if the
            selected parameter index strictly goes past the number of defined parameters for this
            item.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpItems.Items">
            <summary>
            The list of items to present to the user.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpItems.ApplicableSpan">
            <summary>
            The span this session applies to.
            
            Navigation outside this span will cause signature help to be dismissed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpItems.ArgumentIndex">
            <summary>
            Returns the specified argument index that the provided position is at in the current document.  This 
            index may be greater than the number of arguments in the selected <see cref="T:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpItems.ArgumentCount">
            <summary>
            Returns the total number of arguments that have been typed in the current document.  This may be 
            greater than the ArgumentIndex if there are additional arguments after the provided position.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpItems.ArgumentName">
            <summary>
            Returns the name of specified argument at the current position in the document.  
            This only applies to languages that allow the user to provide named arguments.
            If no named argument exists at the current position, then null should be returned. 
            
            This value is used to determine which documentation comment should be provided for the current
            parameter.  Normally this is determined simply by determining the parameter by index.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpItems.SelectedItemIndex">
            <summary>
            The item to select by default.  If this is <code>null</code> then the controller will
            pick the first item that has enough arguments to be viable based on what argument 
            position the user is currently inside of.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpSymbolParameter">
            <summary>
            Used for C#/VB sig help providers so they can build up information using SymbolDisplayParts.
            These parts will then by used to properly replace anonymous type information in the parts.
            Once that it done, this will be converted to normal SignatureHelpParameters which only 
            point to TaggedText parts.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpSymbolParameter.Name">
            <summary>
            The name of this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpSymbolParameter.DocumentationFactory">
            <summary>
            Documentation for this parameter.  This should normally be presented to the user when
            this parameter is selected.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpSymbolParameter.PrefixDisplayParts">
            <summary>
            Display parts to show before the normal display parts for the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpSymbolParameter.SuffixDisplayParts">
            <summary>
            Display parts to show after the normal display parts for the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpSymbolParameter.DisplayParts">
            <summary>
            Display parts for this parameter.  This should normally be presented to the user as part
            of the entire signature display.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpSymbolParameter.IsOptional">
            <summary>
            True if this parameter is optional or not.  Optional parameters may be presented in a
            different manner to users.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpSymbolParameter.SelectedDisplayParts">
            <summary>
            Display parts for this parameter that should be presented to the user when this
            parameter is selected.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpParameter.Name">
            <summary>
            The name of this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpParameter.DocumentationFactory">
            <summary>
            Documentation for this parameter.  This should normally be presented to the user when
            this parameter is selected.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpParameter.PrefixDisplayParts">
            <summary>
            Display parts to show before the normal display parts for the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpParameter.SuffixDisplayParts">
            <summary>
            Display parts to show after the normal display parts for the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpParameter.DisplayParts">
            <summary>
            Display parts for this parameter.  This should normally be presented to the user as part
            of the entire signature display.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpParameter.IsOptional">
            <summary>
            True if this parameter is optional or not.  Optional parameters may be presented in a
            different manner to users.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpParameter.SelectedDisplayParts">
            <summary>
            Display parts for this parameter that should be presented to the user when this
            parameter is selected.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerReason.InvokeSignatureHelpCommand">
            <summary>
            Signature Help was triggered through the 'Invoke Signature Help' command
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerReason.TypeCharCommand">
            <summary>
            Signature Help was triggered through the 'Type Char' command.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerReason.RetriggerCommand">
            <summary>
            Signature Help was triggered through typing a closing brace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.IDocumentTrackingService.GetActiveDocument">
            <summary>
            Get the <see cref="T:Microsoft.CodeAnalysis.DocumentId"/> of the active document. May be null if there is no active document
            or the active document is not in the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.IDocumentTrackingService.GetVisibleDocuments">
            <summary>
            Get a read only collection of the <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s of all the visible documents in the workspace.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.IDocumentTrackingService.NonRoslynBufferTextChanged">
            <summary>
            Events for Non Roslyn text buffer changes.
            
            It raises events for buffers opened in a view in host.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Host.ProjectCacheService">
            <summary>
            This service will implicitly cache previous Compilations used by each supported Workspace implementation.
            The number of Compilations cached is determined by <see cref="F:Microsoft.CodeAnalysis.Host.ProjectCacheService.ImplicitCacheSize"/>.  For now, we'll only
            support implicit caching for VS Workspaces (<see cref="F:Microsoft.CodeAnalysis.WorkspaceKind.Host"/>), as caching is known to
            reduce latency in designer scenarios using the VS workspace.  For other Workspace kinds, the cost of the
            cache is likely to outweigh the benefit (for example, in Misc File Workspace cases, we can end up holding
            onto a lot of memory even after a file is closed).  We can opt in other kinds of Workspaces as needed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.DeclarationInfo">
            <summary>
            Struct containing information about a source declaration.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DeclarationInfo.DeclaredNode">
            <summary>
            Topmost syntax node for this declaration.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DeclarationInfo.ExecutableCodeBlocks">
            <summary>
            Syntax nodes for executable code blocks (method body, initializers, etc.) associated with this declaration.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DeclarationInfo.DeclaredSymbol">
            <summary>
            Symbol declared by this declaration.
            </summary>
        </member>
    </members>
</doc>
