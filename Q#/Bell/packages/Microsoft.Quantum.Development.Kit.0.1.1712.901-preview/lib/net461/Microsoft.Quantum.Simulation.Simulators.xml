<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Quantum.Simulation.Simulators</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.AbstractFactory`1">
            <summary>
                A Base class for Factories used to create and manage instances
                of objects of certain type.
                It takes of creating new instances and caching them.
                It also provides a mechanism to register overrides when a given
                type should be replaces by a subclass.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.AbstractFactory`1.Register(System.Type,System.Type,System.Type)">
            <summary>
            Register an override for the given operation.
            The original Type must be a subclass of Operation, and the replace Type must be a 
            subclass of the Type it is overriding, otherwise an ArgumentException is thrown.
            It also throws Exception if either of the parameters is null.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.AbstractFactory`1.Validate(`0)">
            <summary>
            Implemented by a concrete class to make sure the newly created object
            is valid.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.AbstractFactory`1.CanCache(`0)">
            <summary>
            Used to determine if the given instance should be cached.
            By default, all instances are cacheable.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.PrimitiveOperationsGroupsNames">
            <summary>
            Names of primitive operation groups for which statistics are collected 
            by <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/> when
            <see cref="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulatorConfiguration.usePrimitiveOperationsCounter"/> is set to <c>true</c>. 
            These can be passed as an argument 
            metric to
            <see cref="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.GetMetric``2(System.String,Microsoft.Quantum.Simulation.Core.OperationFunctor,Microsoft.Quantum.Simulation.Core.OperationFunctor)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.PrimitiveOperationsGroupsNames.CNOT">
            <summary>
            The CNOT gate, also known as the Controlled Pauli X gate.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.PrimitiveOperationsGroupsNames.T">
            <summary>
            The T gate and its conjugates, including the T gate, T_x = H.T.H, and T_y = Hy.T.Hy.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.PrimitiveOperationsGroupsNames.QubitClifford">
            <summary>
            Any single qubit Clifford and Pauli gate.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.PrimitiveOperationsGroupsNames.R">
            <summary>
            Any single qubit rotation excluding T, Clifford and Pauli gates.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.PrimitiveOperationsGroupsNames.Measure">
            <summary>
            Any measurement. 
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.GateTimes">
            <summary>
            This class provides sample configurations 
            for the <see cref="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulatorConfiguration.gateTimes"/> field
            that follow some conventions commonly used in the literature.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.GateTimes.TGatesOnly">
            <summary>
            This configuration specifies that all gates except T take 0 time. 
            A T gate is set to take unit time.
            With this gate time configuration, <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/>
            will compute T depth.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.GateTimes.CNOTOnly">
            <summary>
            This configuration specifies that all gates except CNOT take 0 time. 
            A CNOT gate is set to take unit time.
            With this gate time configuration, <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/>
            will compute CNOT depth.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsNames">
            <summary>
            Names of the metrics supported by components of <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsNames.DepthCounter">
            <summary>
            Metric names collected by the DepthCounter component. 
            Set <see cref="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulatorConfiguration.useDepthCounter"/> to <c>true</c>
            to enable collection.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsNames.DepthCounter.Depth">
            <summary>
            Depth of the quantum circuit executed by an operation.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsNames.DepthCounter.StartTimeDifference">
            <summary>
            Maximal difference in the availability time for qubits input into the operation.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsNames.WidthCounter">
            <summary>
            Metric names collected by the Width Counter component. 
            Set <see cref="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulatorConfiguration.useWidthCounter"/> to <c>true</c> to enable collection.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsNames.WidthCounter.BorrowedWith">
            <summary>
            Maximum number of qubits borrowed inside the operation.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsNames.WidthCounter.ExtraWidth">
            <summary>
            Maximum number of qubits allocated during the execution of the operation.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsNames.WidthCounter.InputWidth">
            <summary>
            Number of qubits input into the operation.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsNames.WidthCounter.ReturnWidth">
            <summary>
            Number of qubits returned from an operation.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.StatisticsNames">
            <summary>
            Names of the statistics collected by <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.StatisticsNames.Min">
            <summary>
            The smallest value of a metric among all collected samples.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.StatisticsNames.Max">
            <summary>
            The largest value of a metric among all collected samples.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.StatisticsNames.Average">
            <summary>
            The average of a metric over all collected samples.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.StatisticsNames.SecondMoment">
            <summary>
            The second moment of a metric over all collected samples.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsCountersNames">
            <summary>
            Names of metric calculators used in <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/>. These correspond to 
            the keys of the dictionary returned by <see cref="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.ToCSV(System.String)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsCountersNames.primitiveOperationsCounter">
            <summary>
            Name of the Primitive Operation Counting component of <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsCountersNames.depthCounter">
            <summary>
            Name of the Depth Counting component of <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsCountersNames.widthCounter">
            <summary>
            Name of the Width Counting component of <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/>. 
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.Implementation.QCTraceSimulatorImpl">
            <summary>
            Internals of <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/>. For internal use only.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.Implementation.QCTraceSimulatorImpl.InitializeQCTracerCoreListeners(System.Collections.Generic.IList{Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener})">
            <summary>
            This function can be overridden to add more listeners of
            type <see cref="T:Microsoft.Quantum.Simulation.QCTraceSimulatorRuntime.IQCTraceSimulatorListener"/>
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.PrimitiveOperationsGroups">
            <summary>
            Groups of primitive operations counted by <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/>.
            Used as a key for the <see cref="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulatorConfiguration.gateTimes"/> 
            dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.PrimitiveOperationsGroups.CNOT">
            <summary>
            Controlled Pauli X gate, also known as CNOT
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.PrimitiveOperationsGroups.QubitClifford">
            <summary>
            Any single qubit Clifford and Pauli gate.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.PrimitiveOperationsGroups.R">
            <summary>
            Any single qubit rotation excluding T and Clifford gates
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.PrimitiveOperationsGroups.Measure">
            <summary>
            Any measurement. 
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.PrimitiveOperationsGroups.T">
            <summary>
            This includes T gate, T_x = H.T.H, T_y = Hy.T.Hy 
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulatorConfiguration">
            <summary>
            The configuration of <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulatorConfiguration.useDistinctInputsChecker">
            <summary>
            If set to <c>true</c>, the Distinct Inputs Checker component of QCTraceSimulator is used.
            If input to an operation containing non-distinct qubits is detected, a
            <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.DistinctInputsCheckerException"/> is thrown.
            For more details, please refer to the 
            "Quantum computer trace simulator/Distinct Inputs Checker" 
            documentation section.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulatorConfiguration.useInvalidatedQubitsUseChecker">
            <summary>
            If set to <c>true</c>, the Invalidated Qubits Use Checker component
            of QCTraceSimulator is used. If the problem is detected,
            <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.InvalidatedQubitsUseCheckerException"/> is thrown.
            For more details, please refer to the 
            "Quantum computer trace simulator/Invalidated Qubits Use Checker" 
            documentation section.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulatorConfiguration.usePrimitiveOperationsCounter">
            <summary>
            If set to <c>true</c>, QCTraceSimulator collects primitive operation counts for each call graph edge.
            The names of the metrics collected by Primitive Operations Counter are listed in 
            <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.PrimitiveOperationsGroupsNames"/>.
            For more details, please refer to the 
            "Quantum computer trace simulator/Primitive Operations Counter" 
            documentation section.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulatorConfiguration.useDepthCounter">
            <summary>
            If set to <c>true</c>, QCTraceSimulator collects operations depth per each call graph edge.
            The names of the metrics collected by the Depth Counter 
            are listed in <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsNames.DepthCounter"/>
            For more details, please refer to the 
            "Quantum computer trace simulator/Depth Counter" documentation section.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulatorConfiguration.useWidthCounter">
            <summary>
            If set to <c>true</c>, QCTraceSimulator collects information about the number of qubits used per call graph edge.
            The names of the metrics collected by the Width Counter 
            are listed in <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsNames.WidthCounter"/>. 
            For more details, please refer to the 
            "Quantum computer trace simulator/ Width Counter" documentation section.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulatorConfiguration.gateTimes">
            <summary>
            Specifies the time it takes to execute each gate.
            In other words, specifies the depth of each primitive operation. 
            These fields are used by the 
            Depth Counter component of <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/> to compute the aggregate 
            depth of operations.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulatorConfiguration.throwOnUnconstraintMeasurement">
            <summary>
            If set to <c>true</c>, an <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.UnconstrainedMeasurementException"/> is thrown 
            every time there is an unconstrained measurement. For more details,
            please refer to the "Quantum computer trace simulator" documentation  section.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator">
            <summary>
            Quantum Computer Trace Simulator. Simulates a trace of the execution of a quantum 
            program on a quantum computer without performing full quantum state simulation.
            </summary>
            
            <remarks>
            <para>
            The simulator collects metrics describing the performance of Q# operations and 
            resource consumption by Q# operations. For example, these metrics include the number
            of qubits that an operation takes as an input; the number of qubits allocated
            by an operation; and the number of T gates executed by an operation. 
            For the full list of metrics, see the <see cref="P:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.MetricNames"/> property and the
            <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.PrimitiveOperationsGroupsNames"/> and <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsNames"/> classes.
            </para>
            <para>
            Q# operations may have different variants that are invoked using functors. Each operation
            in Q# can have up to four variants: body, adjoint, controlled, and controlled adjoint. 
            Usually, the controlled version of an operation uses a different number of gates, 
            has a different depth, and uses a different number of qubits than the body of 
            the operation. For this reason, the simulator collects metrics separately 
            for each operation variant.
            </para>
            <para>
            The simulator collects metrics for each edge of the call graph. For example, if the 
            adjoint variant of operation A calls the controlled variant of operation B, 
            the edge (B: Controlled, A: Adjoint) will appear in the call graph with the adjoint variant 
            of A as a caller of the controlled variant of B. The operations that are called 
            by the Run method of the simulator are top-level. The metrics collected for 
            top-level operations are obtained by their names without specifying the caller name.
            </para>
            <para>
            The simulator can potentially collect multiple values of the same metric 
            associated with the same call graph edge. For example, the adjoint variant of 
            operation A can be called multiple times and with different parameters. The 
            simulator does not store all collected values of the metrics. Instead, the simulator 
            computes functions of the collected values of the metric on the fly. For example, 
            the simulator computes minimum, maximum and average of the collected values. 
            We call these functions statistics of the metric. 
            To get the full list of statistics computed for a given
            metric use the <see cref="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.GetMetricStatisticNames(System.String)"/> method. 
            The list of statistics is also available through the members of the
            <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.StatisticsNames"/> class.
            </para>
            <para>
            Q# operations are mapped to C# types. For example, the 
            C# type <see cref="T:Microsoft.Quantum.Primitive.X"/> 
            corresponds to the Q# operation <a href="https://docs.microsoft.com/qsharp/api/prelude/microsoft.quantum.primitive.x">Microsoft.Quantum.Primitive.X</a>. 
            When the value of the metrics is requested for a Q# operation, 
            the corresponding C# type is passed as type parameter.
            </para>
            <para>
            When the maximum of all collected values of the metric is equal to the minimum, 
            the metric value is well-defined and the methods
            <see cref="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.GetMetric``1(System.String,Microsoft.Quantum.Simulation.Core.OperationFunctor)"/> and 
            <see cref="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.GetMetric``2(System.String,Microsoft.Quantum.Simulation.Core.OperationFunctor,Microsoft.Quantum.Simulation.Core.OperationFunctor)"/>
            can be used. Otherwise, the methods
            <see cref="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.GetMetricStatistic``1(System.String,System.String,Microsoft.Quantum.Simulation.Core.OperationFunctor)"/> and
            <see cref="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.GetMetricStatistic``2(System.String,System.String,Microsoft.Quantum.Simulation.Core.OperationFunctor,Microsoft.Quantum.Simulation.Core.OperationFunctor)"/>
            must be used to retrieve the statistics of the metric. 
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.GetConfigurationCopy">
            <summary>
            Returns a copy of the configuration used to create this instance of 
            <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.GetMetric``1(System.String,Microsoft.Quantum.Simulation.Core.OperationFunctor)">
            <summary> 
            Returns the value of a given metric for a top level operation. 
            </summary>
            
            <param name="metric">
            The name of the metric requested for the top level 
            operation specified by <typeparamref name="TOperation"/> 
            </param>
            
            <typeparam name="TOperation">
            The C# type corresponding to the Q# operation for which the metric is requested. 
            </typeparam>
            
            <exception cref="T:System.Exception"> Thrown when a given metric
            is not well-defined. </exception>
            
            <param name="functor">
            The functor (also called variant) of the operation for which the metric is requested.
            If not specified, this defaults to the "body" variant.
            </param>
            
            <remarks>
            For a more detailed discussion of metrics, statistics, call graph edges and 
            operation variants, see the Remarks section of the <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/> class
            documentation.
            </remarks>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.GetMetric``2(System.String,Microsoft.Quantum.Simulation.Core.OperationFunctor,Microsoft.Quantum.Simulation.Core.OperationFunctor)">
             <summary> 
             Returns the value of a given metric associated with an edge of the 
             call graph.
             </summary>
             
             <param name="metric">
             The name of the metric requested for the specified call graph edge.
             </param>
             
             <typeparam name="TOperation">
             The C# type corresponding to Q# operation for which the metric is requested. 
             </typeparam>
             
             <typeparam name="TCaller">
             The C# type corresponding to the caller of the Q# operation for which the metric is requested.
             </typeparam>
             
             <exception cref="T:System.Exception"> Thrown when a given metric
             is not well-defined. </exception>
             
             <param name="functor">
             The functor (also called variant) of the operation for which the metric is requested. 
             If not specified, this defaults to the "body" variant.
             </param>
             
             <param name="callerFunctor">
             The functor (also called variant) of the caller of the operation
             for which the metric is requested.
             If not specified, this defaults to the "body" variant.
             </param>
            
             <remarks>
             For a more detailed discussion of metrics, statistics, call graph edges and 
             operation variants, see the Remarks section of the <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/> class
             documentation.
             </remarks>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.GetMetricStatistic``1(System.String,System.String,Microsoft.Quantum.Simulation.Core.OperationFunctor)">
            <summary> 
            Returns a statistic of a given metric for a top level operation. 
            </summary>
            
            <param name="metric">
            The name of the metric requested for the top level 
            operation specified by <typeparamref name="T"/>.
            </param>
            
            <param name="statistic">
            The name of a statistic of the specified metric for the specified top level operation.
            </param>
            
            <typeparam name="T">
            The C# type corresponding to the Q# operation for which the metric is requested. 
            </typeparam>
            
            <param name="functor">
            The functor (also called variant) of the operation for which the metric is requested. 
            If not specified, this defaults to the "body" variant.
            </param>
            
            <remarks>
            For a more detailed discussion of metrics, statistics, call graph edges and 
            operation variants, see the Remarks section of the <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/> class
            documentation.
            </remarks>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.GetMetricStatistic``2(System.String,System.String,Microsoft.Quantum.Simulation.Core.OperationFunctor,Microsoft.Quantum.Simulation.Core.OperationFunctor)">
            <summary> 
            Returns a statistic of a given metric associated with an edge of the call graph.
            </summary>
            
            <param name="metric">
            The name of the metric requested for the specified call graph edge.
            </param>
            
            <param name="statistic">
            The name of the statistic of the metric requested for a given call graph edge.
            </param>
            
            
            <typeparam name="TOperation">
            The C# type corresponding to the Q# operation for which the metric is requested. 
            </typeparam>
            
            <typeparam name="TCaller">
            The C# type corresponding to the caller of the Q# operation for which the metric is requested. 
            </typeparam>
            
            <param name="functor">
            The functor (also called variant) of the operation for which the metric is requested. 
            If not specified, this defaults to the "body" variant.
            </param>
            
            <param name="callerFunctor">
            The functor (also called variant) of the caller of the operation
            for which the metric is requested. 
            If not specified, this defaults to the "body" variant.
            </param>
            
            <remarks>
            For a more detailed discussion of metrics, statistics, call graph edges and 
            operation variants, see the Remarks section of the <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/> class
            documentation.
            </remarks>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.GetMetricStatisticNames(System.String)">
            <summary>
            Returns the names of all statistics currently collected for a given metric.
            </summary>
            
            <param name="metric">
            The metric may be any member of <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.PrimitiveOperationsGroupsNames"/>
            and <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsNames"/>.
            The full list of the metrics collected by this instance of <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/>
            can be obtained by calling <see cref="P:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.MetricNames"/>.
            </param>
            
            <returns>
            An array of strings with the names of statistics collected for a given metric.
            </returns>
            
            <remarks>
            For a more detailed discussion of metrics and statistics,
            see the Remarks section of the <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/> class
            documentation.
            </remarks>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.#ctor">
            <summary>
            Creates a new instance of the simulator with the default 
            <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulatorConfiguration"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.#ctor(Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulatorConfiguration)">
            <summary>
            Creates a new instance of the simulator with configuration given by 
            the <paramref name="config"/> parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.MetricNames">
            <summary>
            Array of the names of all of the metrics collected by this instance of the simulator.
            This array includes the members of <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.PrimitiveOperationsGroupsNames"/>
            and <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsNames"/>.
            </summary>
                    
            <remarks>
            For a more detailed discussion of metrics, 
            see the Remarks section of the <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator"/> class
            documentation.
            </remarks>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.QCTraceSimulator.ToCSV(System.String)">
            <summary>
            Returns all collected metrics for each call graph edge in CSV format. 
            The key in the dictionary is the name of metric counter  
            from <see cref="T:Microsoft.Quantum.Simulation.Simulators.QCTraceSimulators.MetricsCountersNames"/>. 
            The value for each key is a collection of statistics formatted as a string in CSV format.
            In the CSV format, columns names are formated as "MetricName:StatisticName", and rows 
            correspond to call graph edges.
            </summary>
            
            <param name="format"> The format string used to format values of type 
            <c>double</c> in the CSV file. The method supports the same format strings as the
            <see cref="M:System.Double.ToString(System.String)"/> method.
            </param>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.QuantumSimulator.#ctor(System.Boolean,System.Nullable{System.UInt32})">
            <summary>
            Creates a an instance of a quantum simulator.
            </summary>
            <param name="throwOnReleasingQubitsNotInZeroState"> If set to true, the exception is thrown when trying to release qubits not in zero state </param>
            <param name="randomNumberGeneratorSeed"> Seed for the random number generator used by a simulator for measurement outcomes and Primitives.Random operation</param>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.Extensions.GetIds(Microsoft.Quantum.Simulation.Core.QArray{Microsoft.Quantum.Simulation.Core.Qubit})">
            <summary>
            Returns the ids of a qubit array as a uint[]
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.Extensions.InitBuiltinOperations``1(Microsoft.Quantum.Simulation.Simulators.AbstractFactory{``0},System.Type)">
            <summary>
             Automatically identifies and registers a Type's BuiltIn operations. 
             It recursively checks on this and its BaseType for all NestedTypes that are
             a subclass of T and registers as the override of the BaseType 
             it implements.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.SimulatorBase">
            <summary>
                A Base class for Simulators.
                It provides the infrastructure that makes it easy for a Simulator
                to become an OperationFactory (so the execution of an Operation
                can be tied to this simulator) and
                to manage the allocation of Qubits (via the QubitManager).
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.SimulatorBase.Get``2">
            <summary>
            Returns an instance of the given Type T.
            If an override has been defined for T, it will return an instance of the replacement Type,
            otherwise, it will try to create an instance of T and return it.
            
            Instances are cached, thus calling this method for the same Operation more than once returns the same instance.
            
            If the operation has no body in the Qflat file, and no override has been defined in the Simulator,
            this method will throw an InvalidOperationException.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.SimulatorBase.CheckQubit(Microsoft.Quantum.Simulation.Core.Qubit,System.String)">
            <summary>
            Verifies that the Qubit can be used as part of an operation.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Simulation.Simulators.SimulatorBase.CheckQubits(Microsoft.Quantum.Simulation.Core.QArray{Microsoft.Quantum.Simulation.Core.Qubit},System.String)">
            <summary>
            Verifies that an array of Qubits can be used as part of an operation.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.SimulatorBase.Allocate">
            <summary>
                Implements the Allocate statement as an operation.
                It just delegates the action to the Simulator's internal QubitManager
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.SimulatorBase.Release">
            <summary>
                Implements the Release statement as an operation.
                It just delegates the action to the Simulator's internal QubitManager
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.SimulatorBase.Borrow">
            <summary>
                Implements the Borrow statement as an operation.
                It just delegates the action to the Simulator's internal QubitManager
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.SimulatorBase.Return">
            <summary>
                Implements the Return statement as an operation.
                It just delegates the action to the Simulator's internal QubitManager
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Simulation.Simulators.SimulatorBase.Message">
            <summary>
                Implements the Log statement as an operation. It just calls Console.WriteLine.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Quantum.Simulation.Simulators.SimulatorsUtils.SampleDistribution(System.Double[],System.Double)" -->
    </members>
</doc>
